#!/usr/bin/env python2
"""
tc - Telecorpo 

Usage:
    tc camera NAME [-s SERVER] [-p PORT] [-i INPUT] [-r RESOLUTION] [-f FRAMERATE]
    tc screen NAME [-s SERVER] [-p PORT]
    tc server [-p PORT] [-t PORT]
    tc terminal [-s SERVER] [-t PORT]
    tc -h | --help

Options:
    -h --help                   Show full help.
    --version                   Show version.

    -n --name=NAME              Client name on format 'name@site'.
    -s --server=SERVER          Server address [default: localhost].
    -p --port=PORT              Server port [default: 5000].
    -t --telnet=PORT            Telnet port [default: 5001].

    -i --input=INPUT            Camera input [default: ball]. 
    -r --resolution=RESOLUTION  Camera resolution [default: 300x400] 
    -f --framerate=FRAMERATE    Camera framerate [default: 30]

"""

import socket
import sys
import Tkinter as tkinter

from docopt import docopt
from twisted.internet import reactor, tksupport
from twisted.spread import pb
from twisted.internet import reactor
from twisted.python import log

from tc import broker, terminal, multimedia

# log.startLogging(sys.stdout)


def getFreePort(addr):
    try:
        s = socket.socket()
        s.connect(addr)
        p = s.getsockname()
        s.close()
        return p[1]
    except:
        raise RuntimeError("Failed to connect to server")


args = docopt(__doc__)


if args['terminal']:
    import os
    sys.exit(os.system("telnet %s %s" % (args['--server'], args['--telnet'])))


if args['server']:
    broker = broker.Broker()

    server_port = int(args['--port'])
    telnet_port = int(args['--telnet'])
    reactor.listenTCP(server_port, pb.PBServerFactory(broker))
    reactor.listenTCP(telnet_port, terminal.TerminalFactory(broker))
    reactor.run()
    sys.exit()


name = args['NAME']
if '@' not in name or name[0] == '@' or name[-1] == '@':
    print "Invalid name '%s'." % name
    sys.exit(1)

server_addr = args['--server']
server_port = int(args['--port'])

tkroot = tkinter.Tk()
tksupport.install(tkroot)

if args['camera']:
    window = multimedia.VideoWindow(tkroot, '%s - camera' % name)
    resolution = map(int, args['--resolution'].split('x'))
    framerate = int(args['--framerate'])
    pipe = multimedia.CameraPipeline(args['--input'], window.getWindowHandle(),
                                     resolution, framerate)
                        
    data = broker.CopyableData(broker.RemoteType.CAMERA, name) 

elif args['screen']:
    window = multimedia.VideoWindow(tkroot, '%s - screen' % name)
    port = getFreePort((server_addr, server_port))
    pipe = multimedia.ScreenPipeline(port, window.getWindowHandle())
    data = broker.CopyableData(broker.RemoteType.SCREEN, name, port)

else:
    raise RuntimeError


factory = pb.PBClientFactory()
reactor.connectTCP(server_addr, server_port, factory)

def connectionLost(*args):
    if reactor.running:
        reactor.stop()
factory.clientConnectionLost = connectionLost


df = factory.getRootObject()
def gotRoot(pbroot):
    reference = broker.Reference(pipe, pbroot)
    reference.connect(data)
    pipe.play()
def noDonuts(err):
    reactor.stop()
    log.msg("Couldn't connect to server.")
df.addCallbacks(gotRoot, noDonuts)

reactor.run()
pipe.stop()
