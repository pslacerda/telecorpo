#!/usr/bin/env python2
"""
tc - Telecorpo 

Usage:
    tc camera NAME [-s SERVER] [-p PORT] [-i INPUT]
    tc screen NAME [-s SERVER] [-p PORT]
    tc server [-p PORT] [-t PORT]
    tc terminal [-s SERVER] [-t PORT]
    tc -h | --help

Options:
    -h --help           Show this help.
    -n --name=NAME      Client name on format 'name@site'.
    -s --server=SERVER  Server address [default: localhost].
    -i --input=INPUT    Camera input [default: ball]. 
    -p --port=PORT      Server port [default: 5000].
    -t --telnet=PORT    Telnet port [default: 5001].

"""

import socket
import Tkinter as tkinter

from docopt import docopt
from twisted.internet import reactor, tksupport
from twisted.spread import pb
from twisted.internet import reactor

from tc import broker, terminal
from tc.multimedia import pipelines, receivers, streamers, VideoWindow


def abort(msg):
    print 'Abort:', msg.strip()
    raise SystemExit

def getFreePort(addr):
    try:
        s = socket.socket()
        s.connect(addr)
        p = s.getsockname()
        s.close()
        return p[1]
    except:
        raise RuntimeError("Failed to connect to server")


args = docopt(__doc__)


if args['terminal']:
    import os
    raise SystemExit(os.system("telnet %s %s" % (args['--server'], args['--telnet'])))


if args['server']:
    broker = broker.Broker()

    server_port = int(args['--port'])
    telnet_port = int(args['--telnet'])
    reactor.listenTCP(server_port, pb.PBServerFactory(broker))
    reactor.listenTCP(telnet_port, terminal.TerminalFactory(broker))
    reactor.run()
    raise SystemExit



name = args['NAME']
if '@' not in name or name[0] == '@' or name[-1] == '@':
    abort("Bad name.")

server_addr = args['--server']
server_port = int(args['--port'])

tkroot = tkinter.Tk()
tksupport.install(tkroot)

if args['camera']:
    pipe = pipelines.CameraPipeline(args['--input'])
    data = broker.CopyableData(broker.RemoteType.CAMERA, name) 
    title = '%s - camera' % name

elif args['screen']:
    port = getFreePort((server_addr, server_port))
    pipe = pipelines.ScreenPipeline(port)
    data = broker.CopyableData(broker.RemoteType.SCREEN, name, port)
    title = '%s - screen' % name

else:
    raise RuntimeError


window = VideoWindow(tkroot, title)
pipe.setWindowHandle(window.getWindowHandle())

factory = pb.PBClientFactory()
reactor.connectTCP(server_addr, server_port, factory)

def connectionLost(*args):
    if reactor.running:
        reactor.stop()
factory.clientConnectionLost = connectionLost


df = factory.getRootObject()
def gotRoot(pbroot):
    reference = broker.Reference(pipe, pbroot)
    reference.connect(data)
    pipe.play()
df.addCallback(gotRoot)

reactor.run()
pipe.stop()
