
<!-- saved from url=(0084)https://raw.githubusercontent.com/pslacerda/telecorpo/0.12/etc/GstRtspServer-1.0.gir -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style type="text/css"></style></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">&lt;?xml version="1.0"?&gt;
&lt;!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  --&gt;
&lt;repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0"&gt;
  &lt;include name="Gst" version="1.0"/&gt;
  &lt;include name="GstNet" version="1.0"/&gt;
  &lt;include name="GstRtsp" version="1.0"/&gt;
  &lt;package name="gstreamer-rtsp-server-1.0"/&gt;
  &lt;c:include name="gst/gst.h"/&gt;
  &lt;namespace name="GstRtspServer"
             version="1.0"
             shared-library="libgstrtspserver-1.0.so.0"
             c:identifier-prefixes="Gst"
             c:symbol-prefixes="gst"&gt;
    &lt;record name="RTSPAddress"
            c:type="GstRTSPAddress"
            glib:type-name="GstRTSPAddress"
            glib:get-type="gst_rtsp_address_get_type"
            c:symbol-prefix="rtsp_address"&gt;
      &lt;doc xml:space="preserve"&gt;An address&lt;/doc&gt;
      &lt;field name="pool" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the #GstRTSPAddressPool owner of this address&lt;/doc&gt;
        &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
      &lt;/field&gt;
      &lt;field name="address" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the address&lt;/doc&gt;
        &lt;type name="utf8" c:type="gchar*"/&gt;
      &lt;/field&gt;
      &lt;field name="port" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the port number&lt;/doc&gt;
        &lt;type name="guint16" c:type="guint16"/&gt;
      &lt;/field&gt;
      &lt;field name="n_ports" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;number of ports&lt;/doc&gt;
        &lt;type name="gint" c:type="gint"/&gt;
      &lt;/field&gt;
      &lt;field name="ttl" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;TTL or 0 for unicast addresses&lt;/doc&gt;
        &lt;type name="guint8" c:type="guint8"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="gpointer" c:type="gpointer"/&gt;
      &lt;/field&gt;
      &lt;method name="copy" c:identifier="gst_rtsp_address_copy"&gt;
        &lt;doc xml:space="preserve"&gt;Make a copy of @addr.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a copy of @addr.&lt;/doc&gt;
          &lt;type name="RTSPAddress" c:type="GstRTSPAddress*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="addr" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAddress&lt;/doc&gt;
            &lt;type name="RTSPAddress" c:type="GstRTSPAddress*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="free" c:identifier="gst_rtsp_address_free"&gt;
        &lt;doc xml:space="preserve"&gt;Free @addr and releasing it back into the pool when owned by a
pool.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="addr" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAddress&lt;/doc&gt;
            &lt;type name="RTSPAddress" c:type="GstRTSPAddress*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
    &lt;/record&gt;
    &lt;bitfield name="RTSPAddressFlags" c:type="GstRTSPAddressFlags"&gt;
      &lt;doc xml:space="preserve"&gt;Flags used to control allocation of addresses&lt;/doc&gt;
      &lt;member name="none" value="0" c:identifier="GST_RTSP_ADDRESS_FLAG_NONE"&gt;
        &lt;doc xml:space="preserve"&gt;no flags&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="ipv4" value="1" c:identifier="GST_RTSP_ADDRESS_FLAG_IPV4"&gt;
        &lt;doc xml:space="preserve"&gt;an IPv4 address&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="ipv6" value="2" c:identifier="GST_RTSP_ADDRESS_FLAG_IPV6"&gt;
        &lt;doc xml:space="preserve"&gt;and IPv6 address&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="even_port"
              value="4"
              c:identifier="GST_RTSP_ADDRESS_FLAG_EVEN_PORT"&gt;
        &lt;doc xml:space="preserve"&gt;address with an even port&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="multicast"
              value="8"
              c:identifier="GST_RTSP_ADDRESS_FLAG_MULTICAST"&gt;
        &lt;doc xml:space="preserve"&gt;a multicast address&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="unicast"
              value="16"
              c:identifier="GST_RTSP_ADDRESS_FLAG_UNICAST"&gt;
        &lt;doc xml:space="preserve"&gt;a unicast address&lt;/doc&gt;
      &lt;/member&gt;
    &lt;/bitfield&gt;
    &lt;class name="RTSPAddressPool"
           c:symbol-prefix="rtsp_address_pool"
           c:type="GstRTSPAddressPool"
           parent="GObject.Object"
           glib:type-name="GstRTSPAddressPool"
           glib:get-type="gst_rtsp_address_pool_get_type"
           glib:type-struct="RTSPAddressPoolClass"&gt;
      &lt;doc xml:space="preserve"&gt;An address pool, all member are private&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_address_pool_new"&gt;
        &lt;doc xml:space="preserve"&gt;Make a new #GstRTSPAddressPool.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPAddressPool&lt;/doc&gt;
          &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
        &lt;/return-value&gt;
      &lt;/constructor&gt;
      &lt;method name="acquire_address"
              c:identifier="gst_rtsp_address_pool_acquire_address"&gt;
        &lt;doc xml:space="preserve"&gt;Take an address and ports from @pool. @flags can be used to control the
allocation. @n_ports consecutive ports will be allocated of which the first
one can be found in @port.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPAddress that should be freed with gst_rtsp_address_free
  after use or %NULL when no address could be acquired.&lt;/doc&gt;
          &lt;type name="RTSPAddress" c:type="GstRTSPAddress*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAddressPool&lt;/doc&gt;
            &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="flags" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;flags&lt;/doc&gt;
            &lt;type name="RTSPAddressFlags" c:type="GstRTSPAddressFlags"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="n_ports" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the amount of ports&lt;/doc&gt;
            &lt;type name="gint" c:type="gint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="add_range" c:identifier="gst_rtsp_address_pool_add_range"&gt;
        &lt;doc xml:space="preserve"&gt;Adds the addresses from @min_addess to @max_address (inclusive)
to @pool. The valid port range for the addresses will be from @min_port to
@max_port inclusive.

When @ttl is 0, @min_address and @max_address should be unicast addresses.
@min_address and @max_address can be set to
#GST_RTSP_ADDRESS_POOL_ANY_IPV4 or #GST_RTSP_ADDRESS_POOL_ANY_IPV6 to bind
to all available IPv4 or IPv6 addresses.

When @ttl &amp;gt; 0, @min_address and @max_address should be multicast addresses.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if the addresses could be added.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAddressPool&lt;/doc&gt;
            &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="min_address" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a minimum address to add&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="max_address" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a maximum address to add&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="min_port" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the minimum port&lt;/doc&gt;
            &lt;type name="guint16" c:type="guint16"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="max_port" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the maximum port&lt;/doc&gt;
            &lt;type name="guint16" c:type="guint16"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="ttl" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a TTL or 0 for unicast addresses&lt;/doc&gt;
            &lt;type name="guint8" c:type="guint8"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="clear" c:identifier="gst_rtsp_address_pool_clear"&gt;
        &lt;doc xml:space="preserve"&gt;Clear all addresses in @pool. There should be no outstanding
allocations.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAddressPool&lt;/doc&gt;
            &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="dump" c:identifier="gst_rtsp_address_pool_dump"&gt;
        &lt;doc xml:space="preserve"&gt;Dump the free and allocated addresses to stdout.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAddressPool&lt;/doc&gt;
            &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="has_unicast_addresses"
              c:identifier="gst_rtsp_address_pool_has_unicast_addresses"&gt;
        &lt;doc xml:space="preserve"&gt;Used to know if the pool includes any unicast addresses.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if the pool includes any unicast addresses, %FALSE otherwise&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAddressPool&lt;/doc&gt;
            &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="reserve_address"
              c:identifier="gst_rtsp_address_pool_reserve_address"&gt;
        &lt;doc xml:space="preserve"&gt;Take a specific address and ports from @pool. @n_ports consecutive
ports will be allocated of which the first one can be found in
@port.

If @ttl is 0, @address should be a unicast address. If @ttl &amp;gt; 0, @address
should be a valid multicast address.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;#GST_RTSP_ADDRESS_POOL_OK if an address was reserved. The address
is returned in @address and should be freed with gst_rtsp_address_free
after use.&lt;/doc&gt;
          &lt;type name="RTSPAddressPoolResult"
                c:type="GstRTSPAddressPoolResult"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAddressPool&lt;/doc&gt;
            &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ip_address" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;The IP address to reserve&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="port" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;The first port to reserve&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="n_ports" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;The number of ports&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="ttl" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;The requested ttl&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;storage for a #GstRTSPAddress&lt;/doc&gt;
            &lt;type name="RTSPAddress" c:type="GstRTSPAddress**"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;field name="parent"&gt;
        &lt;doc xml:space="preserve"&gt;the parent GObject&lt;/doc&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPAddressPoolPrivate"
              c:type="GstRTSPAddressPoolPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/class&gt;
    &lt;record name="RTSPAddressPoolClass"
            c:type="GstRTSPAddressPoolClass"
            glib:is-gtype-struct-for="RTSPAddressPool"&gt;
      &lt;doc xml:space="preserve"&gt;Opaque Address pool class.&lt;/doc&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;record name="RTSPAddressPoolPrivate"
            c:type="GstRTSPAddressPoolPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;enumeration name="RTSPAddressPoolResult"
                 c:type="GstRTSPAddressPoolResult"&gt;
      &lt;doc xml:space="preserve"&gt;Result codes from RTSP address pool functions.&lt;/doc&gt;
      &lt;member name="ok" value="0" c:identifier="GST_RTSP_ADDRESS_POOL_OK"&gt;
        &lt;doc xml:space="preserve"&gt;no error&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="einval"
              value="-1"
              c:identifier="GST_RTSP_ADDRESS_POOL_EINVAL"&gt;
        &lt;doc xml:space="preserve"&gt;invalid arguments were provided to a function&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="ereserved"
              value="-2"
              c:identifier="GST_RTSP_ADDRESS_POOL_ERESERVED"&gt;
        &lt;doc xml:space="preserve"&gt;the addres has already been reserved&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="erange"
              value="-3"
              c:identifier="GST_RTSP_ADDRESS_POOL_ERANGE"&gt;
        &lt;doc xml:space="preserve"&gt;the address is not in the pool&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="elast"
              value="-4"
              c:identifier="GST_RTSP_ADDRESS_POOL_ELAST"&gt;
        &lt;doc xml:space="preserve"&gt;last error&lt;/doc&gt;
      &lt;/member&gt;
    &lt;/enumeration&gt;
    &lt;class name="RTSPAuth"
           c:symbol-prefix="rtsp_auth"
           c:type="GstRTSPAuth"
           parent="GObject.Object"
           glib:type-name="GstRTSPAuth"
           glib:get-type="gst_rtsp_auth_get_type"
           glib:type-struct="RTSPAuthClass"&gt;
      &lt;doc xml:space="preserve"&gt;The authentication structure.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_auth_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPAuth instance.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPAuth&lt;/doc&gt;
          &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
        &lt;/return-value&gt;
      &lt;/constructor&gt;
      &lt;function name="check" c:identifier="gst_rtsp_auth_check"&gt;
        &lt;doc xml:space="preserve"&gt;Check if @check is allowed in the current context.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;FALSE if check failed.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="check" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the item to check&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/function&gt;
      &lt;function name="make_basic" c:identifier="gst_rtsp_auth_make_basic"&gt;
        &lt;doc xml:space="preserve"&gt;Construct a Basic authorisation token from @user and @pass.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the base64 encoding of the string @user:@pass. g_free()
   after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="user" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a userid&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="pass" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a password&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/function&gt;
      &lt;virtual-method name="authenticate"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="auth" transfer-ownership="none"&gt;
            &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="check"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="auth" transfer-ownership="none"&gt;
            &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="check" transfer-ownership="none"&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;method name="add_basic" c:identifier="gst_rtsp_auth_add_basic"&gt;
        &lt;doc xml:space="preserve"&gt;Add a basic token for the default authentication algorithm that
enables the client with privileges listed in @token.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="auth" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAuth&lt;/doc&gt;
            &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="basic" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the basic token&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="token" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;authorisation token&lt;/doc&gt;
            &lt;type name="RTSPToken" c:type="GstRTSPToken*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_default_token"
              c:identifier="gst_rtsp_auth_get_default_token"&gt;
        &lt;doc xml:space="preserve"&gt;Get the default token for @auth. This token will be used for unauthenticated
users.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPToken of @auth. gst_rtsp_token_unref() after
usage.&lt;/doc&gt;
          &lt;type name="RTSPToken" c:type="GstRTSPToken*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="auth" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAuth&lt;/doc&gt;
            &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_tls_certificate"
              c:identifier="gst_rtsp_auth_get_tls_certificate"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GTlsCertificate used for negotiating TLS @auth.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GTlsCertificate of @auth. g_object_unref() after
usage.&lt;/doc&gt;
          &lt;type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="auth" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAuth&lt;/doc&gt;
            &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="remove_basic" c:identifier="gst_rtsp_auth_remove_basic"&gt;
        &lt;doc xml:space="preserve"&gt;Add a basic token for the default authentication algorithm that
enables the client with privileges from @authgroup.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="auth" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAuth&lt;/doc&gt;
            &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="basic" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the basic token&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_default_token"
              c:identifier="gst_rtsp_auth_set_default_token"&gt;
        &lt;doc xml:space="preserve"&gt;Set the default #GstRTSPToken to @token in @auth. The default token will
be used for unauthenticated users.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="auth" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAuth&lt;/doc&gt;
            &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="token" transfer-ownership="none" allow-none="1"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPToken&lt;/doc&gt;
            &lt;type name="RTSPToken" c:type="GstRTSPToken*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_tls_certificate"
              c:identifier="gst_rtsp_auth_set_tls_certificate"&gt;
        &lt;doc xml:space="preserve"&gt;Set the TLS certificate for the auth. Client connections will only
be accepted when TLS is negotiated.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="auth" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAuth&lt;/doc&gt;
            &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="cert" transfer-ownership="none" allow-none="1"&gt;
            &lt;doc xml:space="preserve"&gt;a #GTlsCertificate&lt;/doc&gt;
            &lt;type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;field name="parent"&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPAuthPrivate" c:type="GstRTSPAuthPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/class&gt;
    &lt;record name="RTSPAuthClass"
            c:type="GstRTSPAuthClass"
            glib:is-gtype-struct-for="RTSPAuth"&gt;
      &lt;doc xml:space="preserve"&gt;The authentication class.&lt;/doc&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="authenticate"&gt;
        &lt;callback name="authenticate"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="auth" transfer-ownership="none"&gt;
              &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="check"&gt;
        &lt;callback name="check"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="auth" transfer-ownership="none"&gt;
              &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="check" transfer-ownership="none"&gt;
              &lt;type name="utf8" c:type="const gchar*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;record name="RTSPAuthPrivate" c:type="GstRTSPAuthPrivate" disguised="1"&gt;
    &lt;/record&gt;
    &lt;class name="RTSPClient"
           c:symbol-prefix="rtsp_client"
           c:type="GstRTSPClient"
           parent="GObject.Object"
           glib:type-name="GstRTSPClient"
           glib:get-type="gst_rtsp_client_get_type"
           glib:type-struct="RTSPClientClass"&gt;
      &lt;doc xml:space="preserve"&gt;The client object represents the connection and its state with a client.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_client_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPClient instance.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPClient&lt;/doc&gt;
          &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
        &lt;/return-value&gt;
      &lt;/constructor&gt;
      &lt;virtual-method name="closed"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="configure_client_media"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="stream" transfer-ownership="none"&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="configure_client_transport"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="ct" transfer-ownership="none"&gt;
            &lt;type name="GstRtsp.RTSPTransport" c:type="GstRTSPTransport*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="create_sdp"&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;type name="GstSdp.SDPMessage" c:type="GstSDPMessage*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="describe_request"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="get_parameter_request"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="handle_response"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="make_path_from_uri"&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="uri" transfer-ownership="none"&gt;
            &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="new_session"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="session" transfer-ownership="none"&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="options_request"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="params_get"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="GstRtsp.RTSPResult" c:type="GstRTSPResult"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="params_set"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="GstRtsp.RTSPResult" c:type="GstRTSPResult"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="pause_request"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="play_request"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="set_parameter_request"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="setup_request"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="teardown_request"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;method name="attach" c:identifier="gst_rtsp_client_attach"&gt;
        &lt;doc xml:space="preserve"&gt;Attaches @client to @context. When the mainloop for @context is run, the
client will be dispatched. When @context is %NULL, the default context will be
used).

This function should be called when the client properties and urls are fully
configured and the client is ready to start.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the ID (greater than 0) for the source within the GMainContext.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="context" transfer-ownership="none" allow-none="1"&gt;
            &lt;doc xml:space="preserve"&gt;a #GMainContext&lt;/doc&gt;
            &lt;type name="GLib.MainContext" c:type="GMainContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_auth" c:identifier="gst_rtsp_client_get_auth"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPAuth used as the authentication manager of @client.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPAuth of @client. g_object_unref() after
usage.&lt;/doc&gt;
          &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_connection"
              c:identifier="gst_rtsp_client_get_connection"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPConnection of @client.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPConnection of @client.
The connection object returned remains valid until the client is freed.&lt;/doc&gt;
          &lt;type name="GstRtsp.RTSPConnection" c:type="GstRTSPConnection*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_mount_points"
              c:identifier="gst_rtsp_client_get_mount_points"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPMountPoints object that @client uses to manage its sessions.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPMountPoints, unref after usage.&lt;/doc&gt;
          &lt;type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_session_pool"
              c:identifier="gst_rtsp_client_get_session_pool"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPSessionPool object that @client uses to manage its sessions.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool, unref after usage.&lt;/doc&gt;
          &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_thread_pool"
              c:identifier="gst_rtsp_client_get_thread_pool"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPThreadPool used as the thread pool of @client.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPThreadPool of @client. g_object_unref() after
usage.&lt;/doc&gt;
          &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="handle_message"
              c:identifier="gst_rtsp_client_handle_message"&gt;
        &lt;doc xml:space="preserve"&gt;Let the client handle @message.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPResult.&lt;/doc&gt;
          &lt;type name="GstRtsp.RTSPResult" c:type="GstRTSPResult"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="message" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;an #GstRTSPMessage&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPMessage" c:type="GstRTSPMessage*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="send_message" c:identifier="gst_rtsp_client_send_message"&gt;
        &lt;doc xml:space="preserve"&gt;Send a message message to the remote end. @message must be a
#GST_RTSP_MESSAGE_REQUEST or a #GST_RTSP_MESSAGE_RESPONSE.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="GstRtsp.RTSPResult" c:type="GstRTSPResult"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="session" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession to send the message to or %NULL&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="message" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;The #GstRTSPMessage to send&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPMessage" c:type="GstRTSPMessage*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="session_filter"
              c:identifier="gst_rtsp_client_session_filter"&gt;
        &lt;doc xml:space="preserve"&gt;Call @func for each session managed by @client. The result value of @func
determines what happens to the session. @func will be called with @client
locked so no further actions on @client can be performed from @func.

If @func returns #GST_RTSP_FILTER_REMOVE, the session will be removed from
@client.

If @func returns #GST_RTSP_FILTER_KEEP, the session will remain in @client.

If @func returns #GST_RTSP_FILTER_REF, the session will remain in @client but
will also be added with an additional ref to the result #GList of this
function..

When @func is %NULL, #GST_RTSP_FILTER_REF will be assumed for each session.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a #GList with all
sessions for which @func returned #GST_RTSP_FILTER_REF. After usage, each
element in the #GList should be unreffed before the list is freed.&lt;/doc&gt;
          &lt;type name="GLib.List" c:type="GList*"&gt;
            &lt;type name="RTSPSession"/&gt;
          &lt;/type&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="func"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="call"
                     closure="1"&gt;
            &lt;doc xml:space="preserve"&gt;a callback&lt;/doc&gt;
            &lt;type name="RTSPClientSessionFilterFunc"
                  c:type="GstRTSPClientSessionFilterFunc"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="user_data" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;user data passed to @func&lt;/doc&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_auth" c:identifier="gst_rtsp_client_set_auth"&gt;
        &lt;doc xml:space="preserve"&gt;configure @auth to be used as the authentication manager of @client.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="auth" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAuth&lt;/doc&gt;
            &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_connection"
              c:identifier="gst_rtsp_client_set_connection"&gt;
        &lt;doc xml:space="preserve"&gt;Set the #GstRTSPConnection of @client. This function takes ownership of
@conn.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="conn" transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPConnection&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPConnection" c:type="GstRTSPConnection*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_mount_points"
              c:identifier="gst_rtsp_client_set_mount_points"&gt;
        &lt;doc xml:space="preserve"&gt;Set @mounts as the mount points for @client which it will use to map urls
to media streams. These mount points are usually inherited from the server that
created the client but can be overriden later.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="mounts" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMountPoints&lt;/doc&gt;
            &lt;type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_send_func"
              c:identifier="gst_rtsp_client_set_send_func"&gt;
        &lt;doc xml:space="preserve"&gt;Set @func as the callback that will be called when a new message needs to be
sent to the client. @user_data is passed to @func and @notify is called when
@user_data is no longer in use.

By default, the client will send the messages on the #GstRTSPConnection that
was configured with gst_rtsp_client_attach() was called.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClientSendFunc&lt;/doc&gt;
            &lt;type name="RTSPClientSendFunc" c:type="GstRTSPClientSendFunc"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="user_data" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;user data passed to @func&lt;/doc&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="notify" transfer-ownership="none" scope="async"&gt;
            &lt;doc xml:space="preserve"&gt;called when @user_data is no longer in use&lt;/doc&gt;
            &lt;type name="GLib.DestroyNotify" c:type="GDestroyNotify"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_session_pool"
              c:identifier="gst_rtsp_client_set_session_pool"&gt;
        &lt;doc xml:space="preserve"&gt;Set @pool as the sessionpool for @client which it will use to find
or allocate sessions. the sessionpool is usually inherited from the server
that created the client but can be overridden later.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool&lt;/doc&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_thread_pool"
              c:identifier="gst_rtsp_client_set_thread_pool"&gt;
        &lt;doc xml:space="preserve"&gt;configure @pool to be used as the thread pool of @client.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="client" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPThreadPool&lt;/doc&gt;
            &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;property name="mount-points" writable="1" transfer-ownership="none"&gt;
        &lt;type name="RTSPMountPoints"/&gt;
      &lt;/property&gt;
      &lt;property name="session-pool" writable="1" transfer-ownership="none"&gt;
        &lt;type name="RTSPSessionPool"/&gt;
      &lt;/property&gt;
      &lt;field name="parent"&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPClientPrivate" c:type="GstRTSPClientPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
      &lt;glib:signal name="closed" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="describe-request" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="get-parameter-request" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="handle-response" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="new-session" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="RTSPSession"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="options-request" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="pause-request" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="play-request" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="set-parameter-request" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="setup-request" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="teardown-request" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
    &lt;/class&gt;
    &lt;record name="RTSPClientClass"
            c:type="GstRTSPClientClass"
            glib:is-gtype-struct-for="RTSPClient"&gt;
      &lt;doc xml:space="preserve"&gt;The client class structure.&lt;/doc&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="create_sdp"&gt;
        &lt;callback name="create_sdp"&gt;
          &lt;return-value transfer-ownership="full"&gt;
            &lt;type name="GstSdp.SDPMessage" c:type="GstSDPMessage*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="configure_client_media"&gt;
        &lt;callback name="configure_client_media"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="stream" transfer-ownership="none"&gt;
              &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="configure_client_transport"&gt;
        &lt;callback name="configure_client_transport"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ct" transfer-ownership="none"&gt;
              &lt;type name="GstRtsp.RTSPTransport" c:type="GstRTSPTransport*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="params_set"&gt;
        &lt;callback name="params_set"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="GstRtsp.RTSPResult" c:type="GstRTSPResult"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="params_get"&gt;
        &lt;callback name="params_get"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="GstRtsp.RTSPResult" c:type="GstRTSPResult"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="make_path_from_uri"&gt;
        &lt;callback name="make_path_from_uri"&gt;
          &lt;return-value transfer-ownership="full"&gt;
            &lt;type name="utf8" c:type="gchar*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="uri" transfer-ownership="none"&gt;
              &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="closed"&gt;
        &lt;callback name="closed"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="new_session"&gt;
        &lt;callback name="new_session"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="session" transfer-ownership="none"&gt;
              &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="options_request"&gt;
        &lt;callback name="options_request"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="describe_request"&gt;
        &lt;callback name="describe_request"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="setup_request"&gt;
        &lt;callback name="setup_request"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="play_request"&gt;
        &lt;callback name="play_request"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="pause_request"&gt;
        &lt;callback name="pause_request"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="teardown_request"&gt;
        &lt;callback name="teardown_request"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="set_parameter_request"&gt;
        &lt;callback name="set_parameter_request"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="get_parameter_request"&gt;
        &lt;callback name="get_parameter_request"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="handle_response"&gt;
        &lt;callback name="handle_response"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="20"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;record name="RTSPClientPrivate"
            c:type="GstRTSPClientPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;callback name="RTSPClientSendFunc" c:type="GstRTSPClientSendFunc"&gt;
      &lt;doc xml:space="preserve"&gt;This callback is called when @client wants to send @message. When @close is
%TRUE, the connection should be closed when the message has been sent.&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="client" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
          &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="message" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPMessage&lt;/doc&gt;
          &lt;type name="GstRtsp.RTSPMessage" c:type="GstRTSPMessage*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="close" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;close the connection&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="user_data" transfer-ownership="none" closure="3"&gt;
          &lt;doc xml:space="preserve"&gt;user data when registering the callback&lt;/doc&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/callback&gt;
    &lt;callback name="RTSPClientSessionFilterFunc"
              c:type="GstRTSPClientSessionFilterFunc"&gt;
      &lt;doc xml:space="preserve"&gt;This function will be called by the gst_rtsp_client_session_filter(). An
implementation should return a value of #GstRTSPFilterResult.

When this function returns #GST_RTSP_FILTER_REMOVE, @sess will be removed
from @client.

A return value of #GST_RTSP_FILTER_KEEP will leave @sess untouched in
@client.

A value of #GST_RTSP_FILTER_REF will add @sess to the result #GList of
gst_rtsp_client_session_filter().&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;doc xml:space="preserve"&gt;a #GstRTSPFilterResult.&lt;/doc&gt;
        &lt;type name="RTSPFilterResult" c:type="GstRTSPFilterResult"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="client" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPClient object&lt;/doc&gt;
          &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="sess" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPSession in @client&lt;/doc&gt;
          &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="user_data" transfer-ownership="none" closure="2"&gt;
          &lt;doc xml:space="preserve"&gt;user data that has been given to gst_rtsp_client_session_filter()&lt;/doc&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/callback&gt;
    &lt;record name="RTSPContext" c:type="GstRTSPContext"&gt;
      &lt;doc xml:space="preserve"&gt;Information passed around containing the context of a request.&lt;/doc&gt;
      &lt;field name="server" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the server&lt;/doc&gt;
        &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
      &lt;/field&gt;
      &lt;field name="conn" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the connection&lt;/doc&gt;
        &lt;type name="GstRtsp.RTSPConnection" c:type="GstRTSPConnection*"/&gt;
      &lt;/field&gt;
      &lt;field name="client" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the client&lt;/doc&gt;
        &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
      &lt;/field&gt;
      &lt;field name="request" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the complete request&lt;/doc&gt;
        &lt;type name="GstRtsp.RTSPMessage" c:type="GstRTSPMessage*"/&gt;
      &lt;/field&gt;
      &lt;field name="uri" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the complete url parsed from @request&lt;/doc&gt;
        &lt;type name="GstRtsp.RTSPUrl" c:type="GstRTSPUrl*"/&gt;
      &lt;/field&gt;
      &lt;field name="method" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the parsed method of @uri&lt;/doc&gt;
        &lt;type name="GstRtsp.RTSPMethod" c:type="GstRTSPMethod"/&gt;
      &lt;/field&gt;
      &lt;field name="auth" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the current auth object or %NULL&lt;/doc&gt;
        &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
      &lt;/field&gt;
      &lt;field name="token" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;authorisation token&lt;/doc&gt;
        &lt;type name="RTSPToken" c:type="GstRTSPToken*"/&gt;
      &lt;/field&gt;
      &lt;field name="session" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the session, can be %NULL&lt;/doc&gt;
        &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
      &lt;/field&gt;
      &lt;field name="sessmedia" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the session media for the url can be %NULL&lt;/doc&gt;
        &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
      &lt;/field&gt;
      &lt;field name="factory" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the media factory for the url, can be %NULL&lt;/doc&gt;
        &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
      &lt;/field&gt;
      &lt;field name="media" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the media for the url can be %NULL&lt;/doc&gt;
        &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
      &lt;/field&gt;
      &lt;field name="stream" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the stream for the url can be %NULL&lt;/doc&gt;
        &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
      &lt;/field&gt;
      &lt;field name="response" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the response&lt;/doc&gt;
        &lt;type name="GstRtsp.RTSPMessage" c:type="GstRTSPMessage*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
      &lt;method name="pop_current" c:identifier="gst_rtsp_context_pop_current"&gt;
        &lt;doc xml:space="preserve"&gt;Pops @ctx off the context stack (verifying that @ctx
is on the top of the stack).&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="ctx" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPContext&lt;/doc&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="push_current" c:identifier="gst_rtsp_context_push_current"&gt;
        &lt;doc xml:space="preserve"&gt;Pushes @ctx onto the context stack. The current
context can then be received using gst_rtsp_context_get_current().&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="ctx" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a ##GstRTSPContext&lt;/doc&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;function name="get_current"
                c:identifier="gst_rtsp_context_get_current"
                introspectable="0"&gt;
        &lt;doc xml:space="preserve"&gt;Get the current #GstRTSPContext. This object is retrieved from the
current thread that is handling the request for a client.&lt;/doc&gt;
        &lt;return-value&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPContext&lt;/doc&gt;
          &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
        &lt;/return-value&gt;
      &lt;/function&gt;
    &lt;/record&gt;
    &lt;enumeration name="RTSPFilterResult" c:type="GstRTSPFilterResult"&gt;
      &lt;doc xml:space="preserve"&gt;Possible return values for gst_rtsp_session_pool_filter().&lt;/doc&gt;
      &lt;member name="remove" value="0" c:identifier="GST_RTSP_FILTER_REMOVE"&gt;
        &lt;doc xml:space="preserve"&gt;Remove session&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="keep" value="1" c:identifier="GST_RTSP_FILTER_KEEP"&gt;
        &lt;doc xml:space="preserve"&gt;Keep session in the pool&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="ref" value="2" c:identifier="GST_RTSP_FILTER_REF"&gt;
        &lt;doc xml:space="preserve"&gt;Ref session in the result list&lt;/doc&gt;
      &lt;/member&gt;
    &lt;/enumeration&gt;
    &lt;callback name="RTSPKeepAliveFunc" c:type="GstRTSPKeepAliveFunc"&gt;
      &lt;doc xml:space="preserve"&gt;Function registered with gst_rtsp_stream_transport_set_keepalive() and called
when the stream is active.&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;type name="none" c:type="void"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="user_data" transfer-ownership="none" closure="0"&gt;
          &lt;doc xml:space="preserve"&gt;user data&lt;/doc&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/callback&gt;
    &lt;class name="RTSPMedia"
           c:symbol-prefix="rtsp_media"
           c:type="GstRTSPMedia"
           parent="GObject.Object"
           glib:type-name="GstRTSPMedia"
           glib:get-type="gst_rtsp_media_get_type"
           glib:type-struct="RTSPMediaClass"&gt;
      &lt;doc xml:space="preserve"&gt;A class that contains the GStreamer element along with a list of
#GstRTSPStream objects that can produce data.

This object is usually created from a #GstRTSPMediaFactory.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_media_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPMedia instance. @element is the bin element that
provides the different streams. The #GstRTSPMedia object contains the
element to produce RTP data for one or more related (audio/video/..)
streams.

Ownership is taken of @element.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPMedia object.&lt;/doc&gt;
          &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="element" transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstElement&lt;/doc&gt;
            &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/constructor&gt;
      &lt;virtual-method name="convert_range"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="range" transfer-ownership="none"&gt;
            &lt;type name="GstRtsp.RTSPTimeRange" c:type="GstRTSPTimeRange*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="unit" transfer-ownership="none"&gt;
            &lt;type name="GstRtsp.RTSPRangeUnit" c:type="GstRTSPRangeUnit"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="create_rtpbin" introspectable="0"&gt;
        &lt;return-value&gt;
          &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="handle_message"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="message" transfer-ownership="none"&gt;
            &lt;type name="Gst.Message" c:type="GstMessage*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="new_state"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="state" transfer-ownership="none"&gt;
            &lt;type name="Gst.State" c:type="GstState"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="new_stream"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="stream" transfer-ownership="none"&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="prepared"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="query_position"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="position" transfer-ownership="none"&gt;
            &lt;type name="gint64" c:type="gint64*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="query_stop"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="stop" transfer-ownership="none"&gt;
            &lt;type name="gint64" c:type="gint64*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="removed_stream"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="stream" transfer-ownership="none"&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="setup_rtpbin"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="rtpbin" transfer-ownership="none"&gt;
            &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="setup_sdp" invoker="setup_sdp"&gt;
        &lt;doc xml:space="preserve"&gt;Add @media specific info to @sdp. @info is used to configure the connection
information in the SDP.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="sdp" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstSDPMessage&lt;/doc&gt;
            &lt;type name="GstSdp.SDPMessage" c:type="GstSDPMessage*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="info" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;info&lt;/doc&gt;
            &lt;type name="SDPInfo" c:type="GstSDPInfo*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="target_state"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="state" transfer-ownership="none"&gt;
            &lt;type name="Gst.State" c:type="GstState"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="unprepare" invoker="unprepare"&gt;
        &lt;doc xml:space="preserve"&gt;Unprepare @media. After this call, the media should be prepared again before
it can be used again. If the media is set to be non-reusable, a new instance
must be created.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="unprepared"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;method name="collect_streams"
              c:identifier="gst_rtsp_media_collect_streams"&gt;
        &lt;doc xml:space="preserve"&gt;Find all payloader elements, they should be named pay\%d in the
element of @media, and create #GstRTSPStreams for them.

Collect all dynamic elements, named dynpay\%d, and add them to
the list of dynamic elements.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="create_stream" c:identifier="gst_rtsp_media_create_stream"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new stream in @media that provides RTP data on @srcpad.
@srcpad should be a pad of an element inside @media-&amp;gt;element.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPStream that remains valid for as long
         as @media exists.&lt;/doc&gt;
          &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="payloader" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstElement&lt;/doc&gt;
            &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="srcpad" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a source #GstPad&lt;/doc&gt;
            &lt;type name="Gst.Pad" c:type="GstPad*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="find_stream" c:identifier="gst_rtsp_media_find_stream"&gt;
        &lt;doc xml:space="preserve"&gt;Find a stream in @media with @control as the control uri.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPStream with control uri @control
or %NULL when a stream with that control did not exist.&lt;/doc&gt;
          &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="control" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the control of the stream&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_address_pool"
              c:identifier="gst_rtsp_media_get_address_pool"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPAddressPool used as the address pool of @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPAddressPool of @media. g_object_unref() after
usage.&lt;/doc&gt;
          &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_base_time" c:identifier="gst_rtsp_media_get_base_time"&gt;
        &lt;doc xml:space="preserve"&gt;Get the base_time that is used by the pipeline in @media.

@media must be prepared before this method returns a valid base_time.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the base_time used by @media.&lt;/doc&gt;
          &lt;type name="Gst.ClockTime" c:type="GstClockTime"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_buffer_size"
              c:identifier="gst_rtsp_media_get_buffer_size"&gt;
        &lt;doc xml:space="preserve"&gt;Get the kernel UDP buffer size.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the kernel UDP buffer size.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_clock" c:identifier="gst_rtsp_media_get_clock"&gt;
        &lt;doc xml:space="preserve"&gt;Get the clock that is used by the pipeline in @media.

@media must be prepared before this method returns a valid clock object.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstClock used by @media. unref after usage.&lt;/doc&gt;
          &lt;type name="Gst.Clock" c:type="GstClock*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_element" c:identifier="gst_rtsp_media_get_element"&gt;
        &lt;doc xml:space="preserve"&gt;Get the element that was used when constructing @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstElement. Unref after usage.&lt;/doc&gt;
          &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_permissions"
              c:identifier="gst_rtsp_media_get_permissions"&gt;
        &lt;doc xml:space="preserve"&gt;Get the permissions object from @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPPermissions object, unref after usage.&lt;/doc&gt;
          &lt;type name="RTSPPermissions" c:type="GstRTSPPermissions*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_profiles" c:identifier="gst_rtsp_media_get_profiles"&gt;
        &lt;doc xml:space="preserve"&gt;Get the allowed profiles of @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPProfile&lt;/doc&gt;
          &lt;type name="GstRtsp.RTSPProfile" c:type="GstRTSPProfile"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_protocols" c:identifier="gst_rtsp_media_get_protocols"&gt;
        &lt;doc xml:space="preserve"&gt;Get the allowed protocols of @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPLowerTrans&lt;/doc&gt;
          &lt;type name="GstRtsp.RTSPLowerTrans" c:type="GstRTSPLowerTrans"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_range_string"
              c:identifier="gst_rtsp_media_get_range_string"&gt;
        &lt;doc xml:space="preserve"&gt;Get the current range as a string. @media must be prepared with
gst_rtsp_media_prepare ().&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;The range as a string, g_free() after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="play" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;for the PLAY request&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="unit" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the unit to use for the string&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPRangeUnit" c:type="GstRTSPRangeUnit"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_status" c:identifier="gst_rtsp_media_get_status"&gt;
        &lt;doc xml:space="preserve"&gt;Get the status of @media. When @media is busy preparing, this function waits
until @media is prepared or in error.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the status of @media.&lt;/doc&gt;
          &lt;type name="RTSPMediaStatus" c:type="GstRTSPMediaStatus"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_stream" c:identifier="gst_rtsp_media_get_stream"&gt;
        &lt;doc xml:space="preserve"&gt;Retrieve the stream with index @idx from @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPStream at index @idx or %NULL when a stream with
that index did not exist.&lt;/doc&gt;
          &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="idx" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the stream index&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_suspend_mode"
              c:identifier="gst_rtsp_media_get_suspend_mode"&gt;
        &lt;doc xml:space="preserve"&gt;Get how @media will be suspended.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;#GstRTSPSuspendMode.&lt;/doc&gt;
          &lt;type name="RTSPSuspendMode" c:type="GstRTSPSuspendMode"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_time_provider"
              c:identifier="gst_rtsp_media_get_time_provider"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstNetTimeProvider for the clock used by @media. The time provider
will listen on @address and @port for client time requests.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstNetTimeProvider of @media.&lt;/doc&gt;
          &lt;type name="GstNet.NetTimeProvider" c:type="GstNetTimeProvider*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="address" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;an address or %NULL&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="port" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a port or 0&lt;/doc&gt;
            &lt;type name="guint16" c:type="guint16"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_eos_shutdown"
              c:identifier="gst_rtsp_media_is_eos_shutdown"&gt;
        &lt;doc xml:space="preserve"&gt;Check if the pipeline for @media will send an EOS down the pipeline before
unpreparing.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if the media will send EOS before unpreparing.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_reusable" c:identifier="gst_rtsp_media_is_reusable"&gt;
        &lt;doc xml:space="preserve"&gt;Check if the pipeline for @media can be reused after an unprepare.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if the media can be reused&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_shared" c:identifier="gst_rtsp_media_is_shared"&gt;
        &lt;doc xml:space="preserve"&gt;Check if the pipeline for @media can be shared between multiple clients.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if the media can be shared between clients.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_time_provider"
              c:identifier="gst_rtsp_media_is_time_provider"&gt;
        &lt;doc xml:space="preserve"&gt;Check if @media can provide a #GstNetTimeProvider for its pipeline clock.

Use gst_rtsp_media_get_time_provider() to get the network clock.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if @media can provide a #GstNetTimeProvider.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="n_streams" c:identifier="gst_rtsp_media_n_streams"&gt;
        &lt;doc xml:space="preserve"&gt;Get the number of streams in this media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;The number of streams.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="prepare" c:identifier="gst_rtsp_media_prepare"&gt;
        &lt;doc xml:space="preserve"&gt;Prepare @media for streaming. This function will create the objects
to manage the streaming. A pipeline must have been set on @media with
gst_rtsp_media_take_pipeline().

It will preroll the pipeline and collect vital information about the streams
such as the duration.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="thread" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPThread to run the bus handler or %NULL&lt;/doc&gt;
            &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="seek" c:identifier="gst_rtsp_media_seek"&gt;
        &lt;doc xml:space="preserve"&gt;Seek the pipeline of @media to @range. @media must be prepared with
gst_rtsp_media_prepare().&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="range" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPTimeRange&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPTimeRange" c:type="GstRTSPTimeRange*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_address_pool"
              c:identifier="gst_rtsp_media_set_address_pool"&gt;
        &lt;doc xml:space="preserve"&gt;configure @pool to be used as the address pool of @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAddressPool&lt;/doc&gt;
            &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_buffer_size"
              c:identifier="gst_rtsp_media_set_buffer_size"&gt;
        &lt;doc xml:space="preserve"&gt;Set the kernel UDP buffer size.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="size" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new value&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_eos_shutdown"
              c:identifier="gst_rtsp_media_set_eos_shutdown"&gt;
        &lt;doc xml:space="preserve"&gt;Set or unset if an EOS event will be sent to the pipeline for @media before
it is unprepared.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="eos_shutdown" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new value&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_permissions"
              c:identifier="gst_rtsp_media_set_permissions"&gt;
        &lt;doc xml:space="preserve"&gt;Set @permissions on @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="permissions" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPPermissions&lt;/doc&gt;
            &lt;type name="RTSPPermissions" c:type="GstRTSPPermissions*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_pipeline_state"
              c:identifier="gst_rtsp_media_set_pipeline_state"&gt;
        &lt;doc xml:space="preserve"&gt;Set the state of the pipeline managed by @media to @state&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="state" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the target state of the pipeline&lt;/doc&gt;
            &lt;type name="Gst.State" c:type="GstState"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_profiles" c:identifier="gst_rtsp_media_set_profiles"&gt;
        &lt;doc xml:space="preserve"&gt;Configure the allowed lower transport for @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="profiles" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new flags&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPProfile" c:type="GstRTSPProfile"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_protocols" c:identifier="gst_rtsp_media_set_protocols"&gt;
        &lt;doc xml:space="preserve"&gt;Configure the allowed lower transport for @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="protocols" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new flags&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPLowerTrans" c:type="GstRTSPLowerTrans"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_reusable" c:identifier="gst_rtsp_media_set_reusable"&gt;
        &lt;doc xml:space="preserve"&gt;Set or unset if the pipeline for @media can be reused after the pipeline has
been unprepared.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="reusable" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new value&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_shared" c:identifier="gst_rtsp_media_set_shared"&gt;
        &lt;doc xml:space="preserve"&gt;Set or unset if the pipeline for @media can be shared will multiple clients.
When @shared is %TRUE, client requests for this media will share the media
pipeline.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="shared" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new value&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_state" c:identifier="gst_rtsp_media_set_state"&gt;
        &lt;doc xml:space="preserve"&gt;Set the state of @media to @state and for the transports in @transports.

@media must be prepared with gst_rtsp_media_prepare();&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="state" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the target state of the media&lt;/doc&gt;
            &lt;type name="Gst.State" c:type="GstState"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="transports" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GPtrArray
of #GstRTSPStreamTransport pointers&lt;/doc&gt;
            &lt;array name="GLib.PtrArray" c:type="GPtrArray*"&gt;
              &lt;type name="RTSPStreamTransport"/&gt;
            &lt;/array&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_suspend_mode"
              c:identifier="gst_rtsp_media_set_suspend_mode"&gt;
        &lt;doc xml:space="preserve"&gt;Control how @ media will be suspended after the SDP has been generated and
after a PAUSE request has been performed.

Media must be unprepared when setting the suspend mode.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="mode" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new #GstRTSPSuspendMode&lt;/doc&gt;
            &lt;type name="RTSPSuspendMode" c:type="GstRTSPSuspendMode"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="setup_sdp" c:identifier="gst_rtsp_media_setup_sdp"&gt;
        &lt;doc xml:space="preserve"&gt;Add @media specific info to @sdp. @info is used to configure the connection
information in the SDP.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="sdp" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstSDPMessage&lt;/doc&gt;
            &lt;type name="GstSdp.SDPMessage" c:type="GstSDPMessage*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="info" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;info&lt;/doc&gt;
            &lt;type name="SDPInfo" c:type="GstSDPInfo*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="suspend" c:identifier="gst_rtsp_media_suspend"&gt;
        &lt;doc xml:space="preserve"&gt;Suspend @media. The state of the pipeline managed by @media is set to
GST_STATE_NULL but all streams are kept. @media can be prepared again
with gst_rtsp_media_undo_reset()

@media must be prepared with gst_rtsp_media_prepare();&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="take_pipeline" c:identifier="gst_rtsp_media_take_pipeline"&gt;
        &lt;doc xml:space="preserve"&gt;Set @pipeline as the #GstPipeline for @media. Ownership is
taken of @pipeline.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="pipeline" transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstPipeline&lt;/doc&gt;
            &lt;type name="Gst.Pipeline" c:type="GstPipeline*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="unprepare" c:identifier="gst_rtsp_media_unprepare"&gt;
        &lt;doc xml:space="preserve"&gt;Unprepare @media. After this call, the media should be prepared again before
it can be used again. If the media is set to be non-reusable, a new instance
must be created.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="unsuspend" c:identifier="gst_rtsp_media_unsuspend"&gt;
        &lt;doc xml:space="preserve"&gt;Unsuspend @media if it was in a suspended state. This method does nothing
when the media was not in the suspended state.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="use_time_provider"
              c:identifier="gst_rtsp_media_use_time_provider"&gt;
        &lt;doc xml:space="preserve"&gt;Set @media to provide a #GstNetTimeProvider.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="time_provider" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;if a #GstNetTimeProvider should be used&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;property name="buffer-size" writable="1" transfer-ownership="none"&gt;
        &lt;type name="guint" c:type="guint"/&gt;
      &lt;/property&gt;
      &lt;property name="element"
                writable="1"
                construct-only="1"
                transfer-ownership="none"&gt;
        &lt;type name="Gst.Element"/&gt;
      &lt;/property&gt;
      &lt;property name="eos-shutdown" writable="1" transfer-ownership="none"&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/property&gt;
      &lt;property name="profiles" writable="1" transfer-ownership="none"&gt;
        &lt;type name="GstRtsp.RTSPProfile"/&gt;
      &lt;/property&gt;
      &lt;property name="protocols" writable="1" transfer-ownership="none"&gt;
        &lt;type name="GstRtsp.RTSPLowerTrans"/&gt;
      &lt;/property&gt;
      &lt;property name="reusable" writable="1" transfer-ownership="none"&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/property&gt;
      &lt;property name="shared" writable="1" transfer-ownership="none"&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/property&gt;
      &lt;property name="suspend-mode" writable="1" transfer-ownership="none"&gt;
        &lt;type name="RTSPSuspendMode"/&gt;
      &lt;/property&gt;
      &lt;property name="time-provider" writable="1" transfer-ownership="none"&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/property&gt;
      &lt;field name="parent"&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPMediaPrivate" c:type="GstRTSPMediaPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
      &lt;glib:signal name="new-state" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="gint" c:type="gint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="new-stream" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="RTSPStream"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="prepared" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="removed-stream" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="RTSPStream"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="target-state" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="gint" c:type="gint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="unprepared" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
      &lt;/glib:signal&gt;
    &lt;/class&gt;
    &lt;record name="RTSPMediaClass"
            c:type="GstRTSPMediaClass"
            glib:is-gtype-struct-for="RTSPMedia"&gt;
      &lt;doc xml:space="preserve"&gt;The RTSP media class&lt;/doc&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="handle_message"&gt;
        &lt;callback name="handle_message"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="message" transfer-ownership="none"&gt;
              &lt;type name="Gst.Message" c:type="GstMessage*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="unprepare"&gt;
        &lt;callback name="unprepare"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="convert_range"&gt;
        &lt;callback name="convert_range"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="range" transfer-ownership="none"&gt;
              &lt;type name="GstRtsp.RTSPTimeRange" c:type="GstRTSPTimeRange*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="unit" transfer-ownership="none"&gt;
              &lt;type name="GstRtsp.RTSPRangeUnit" c:type="GstRTSPRangeUnit"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="query_position"&gt;
        &lt;callback name="query_position"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="position" transfer-ownership="none"&gt;
              &lt;type name="gint64" c:type="gint64*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="query_stop"&gt;
        &lt;callback name="query_stop"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="stop" transfer-ownership="none"&gt;
              &lt;type name="gint64" c:type="gint64*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="create_rtpbin" introspectable="0"&gt;
        &lt;callback name="create_rtpbin" introspectable="0"&gt;
          &lt;return-value&gt;
            &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="setup_rtpbin"&gt;
        &lt;callback name="setup_rtpbin"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="rtpbin" transfer-ownership="none"&gt;
              &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="setup_sdp"&gt;
        &lt;callback name="setup_sdp"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;TRUE on success.&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="sdp" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;a #GstSDPMessage&lt;/doc&gt;
              &lt;type name="GstSdp.SDPMessage" c:type="GstSDPMessage*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="info" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;info&lt;/doc&gt;
              &lt;type name="SDPInfo" c:type="GstSDPInfo*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="new_stream"&gt;
        &lt;callback name="new_stream"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="stream" transfer-ownership="none"&gt;
              &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="removed_stream"&gt;
        &lt;callback name="removed_stream"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="stream" transfer-ownership="none"&gt;
              &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="prepared"&gt;
        &lt;callback name="prepared"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="unprepared"&gt;
        &lt;callback name="unprepared"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="target_state"&gt;
        &lt;callback name="target_state"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="state" transfer-ownership="none"&gt;
              &lt;type name="Gst.State" c:type="GstState"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="new_state"&gt;
        &lt;callback name="new_state"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="state" transfer-ownership="none"&gt;
              &lt;type name="Gst.State" c:type="GstState"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="20"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;class name="RTSPMediaFactory"
           c:symbol-prefix="rtsp_media_factory"
           c:type="GstRTSPMediaFactory"
           parent="GObject.Object"
           glib:type-name="GstRTSPMediaFactory"
           glib:get-type="gst_rtsp_media_factory_get_type"
           glib:type-struct="RTSPMediaFactoryClass"&gt;
      &lt;doc xml:space="preserve"&gt;The definition and logic for constructing the pipeline for a media. The media
can contain multiple streams like audio and video.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_media_factory_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPMediaFactory instance.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPMediaFactory object.&lt;/doc&gt;
          &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
        &lt;/return-value&gt;
      &lt;/constructor&gt;
      &lt;virtual-method name="configure"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="construct" invoker="construct"&gt;
        &lt;doc xml:space="preserve"&gt;Construct the media object and create its streams. Implementations
should create the needed gstreamer elements and add them to the result
object. No state changes should be performed on them yet.

One or more GstRTSPStream objects should be created from the result
with gst_rtsp_media_create_stream ().

After the media is constructed, it can be configured and then prepared
with gst_rtsp_media_prepare ().&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPMedia if the media could be prepared.&lt;/doc&gt;
          &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="url" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the url used&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="create_element" invoker="create_element"&gt;
        &lt;doc xml:space="preserve"&gt;Construct and return a #GstElement that is a #GstBin containing
the elements to use for streaming the media.

The bin should contain payloaders pay\%d for each stream. The default
implementation of this function returns the bin created from the
launch parameter.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstElement.&lt;/doc&gt;
          &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="url" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the url used&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="create_pipeline" introspectable="0"&gt;
        &lt;return-value&gt;
          &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="gen_key"&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="url" transfer-ownership="none"&gt;
            &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="media_configure"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="media_constructed"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="media" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;method name="add_role"
              c:identifier="gst_rtsp_media_factory_add_role"
              introspectable="0"&gt;
        &lt;doc xml:space="preserve"&gt;A convenience method to add @role with @fieldname and additional arguments to
the permissions of @factory. If @factory had no permissions, new permissions
will be created and the role will be added to it.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="role" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a role&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="fieldname" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the first field name&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="..." transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;additional arguments&lt;/doc&gt;
            &lt;varargs/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="construct" c:identifier="gst_rtsp_media_factory_construct"&gt;
        &lt;doc xml:space="preserve"&gt;Construct the media object and create its streams. Implementations
should create the needed gstreamer elements and add them to the result
object. No state changes should be performed on them yet.

One or more GstRTSPStream objects should be created from the result
with gst_rtsp_media_create_stream ().

After the media is constructed, it can be configured and then prepared
with gst_rtsp_media_prepare ().&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPMedia if the media could be prepared.&lt;/doc&gt;
          &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="url" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the url used&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="create_element"
              c:identifier="gst_rtsp_media_factory_create_element"&gt;
        &lt;doc xml:space="preserve"&gt;Construct and return a #GstElement that is a #GstBin containing
the elements to use for streaming the media.

The bin should contain payloaders pay\%d for each stream. The default
implementation of this function returns the bin created from the
launch parameter.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstElement.&lt;/doc&gt;
          &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="url" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the url used&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_address_pool"
              c:identifier="gst_rtsp_media_factory_get_address_pool"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPAddressPool used as the address pool of @factory.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPAddressPool of @factory. g_object_unref() after
usage.&lt;/doc&gt;
          &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_buffer_size"
              c:identifier="gst_rtsp_media_factory_get_buffer_size"&gt;
        &lt;doc xml:space="preserve"&gt;Get the kernel UDP buffer size.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the kernel UDP buffer size.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_launch"
              c:identifier="gst_rtsp_media_factory_get_launch"&gt;
        &lt;doc xml:space="preserve"&gt;Get the gst_parse_launch() pipeline description that will be used in the
default prepare vmethod.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the configured launch description. g_free() after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_permissions"
              c:identifier="gst_rtsp_media_factory_get_permissions"&gt;
        &lt;doc xml:space="preserve"&gt;Get the permissions object from @factory.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPPermissions object, unref after usage.&lt;/doc&gt;
          &lt;type name="RTSPPermissions" c:type="GstRTSPPermissions*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_protocols"
              c:identifier="gst_rtsp_media_factory_get_protocols"&gt;
        &lt;doc xml:space="preserve"&gt;Get the allowed protocols of @factory.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPLowerTrans&lt;/doc&gt;
          &lt;type name="GstRtsp.RTSPLowerTrans" c:type="GstRTSPLowerTrans"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_suspend_mode"
              c:identifier="gst_rtsp_media_factory_get_suspend_mode"&gt;
        &lt;doc xml:space="preserve"&gt;Get how media created from this factory will be suspended.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPSuspendMode.&lt;/doc&gt;
          &lt;type name="RTSPSuspendMode" c:type="GstRTSPSuspendMode"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_eos_shutdown"
              c:identifier="gst_rtsp_media_factory_is_eos_shutdown"&gt;
        &lt;doc xml:space="preserve"&gt;Get if media created from this factory will have an EOS event sent to the
pipeline before shutdown.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if the media will receive EOS before shutdown.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_shared" c:identifier="gst_rtsp_media_factory_is_shared"&gt;
        &lt;doc xml:space="preserve"&gt;Get if media created from this factory can be shared between clients.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if the media will be shared between clients.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_address_pool"
              c:identifier="gst_rtsp_media_factory_set_address_pool"&gt;
        &lt;doc xml:space="preserve"&gt;configure @pool to be used as the address pool of @factory.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAddressPool&lt;/doc&gt;
            &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_buffer_size"
              c:identifier="gst_rtsp_media_factory_set_buffer_size"&gt;
        &lt;doc xml:space="preserve"&gt;Set the kernel UDP buffer size.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="size" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new value&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_eos_shutdown"
              c:identifier="gst_rtsp_media_factory_set_eos_shutdown"&gt;
        &lt;doc xml:space="preserve"&gt;Configure if media created from this factory will have an EOS sent to the
pipeline before shutdown.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="eos_shutdown" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new value&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_launch"
              c:identifier="gst_rtsp_media_factory_set_launch"&gt;
        &lt;doc xml:space="preserve"&gt;The gst_parse_launch() line to use for constructing the pipeline in the
default prepare vmethod.

The pipeline description should return a GstBin as the toplevel element
which can be accomplished by enclosing the dscription with brackets '('
')'.

The description should return a pipeline with payloaders named pay0, pay1,
etc.. Each of the payloaders will result in a stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="launch" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the launch description&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_permissions"
              c:identifier="gst_rtsp_media_factory_set_permissions"&gt;
        &lt;doc xml:space="preserve"&gt;Set @permissions on @factory.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="permissions" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPPermissions&lt;/doc&gt;
            &lt;type name="RTSPPermissions" c:type="GstRTSPPermissions*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_protocols"
              c:identifier="gst_rtsp_media_factory_set_protocols"&gt;
        &lt;doc xml:space="preserve"&gt;Configure the allowed lower transport for @factory.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="protocols" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new flags&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPLowerTrans" c:type="GstRTSPLowerTrans"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_shared"
              c:identifier="gst_rtsp_media_factory_set_shared"&gt;
        &lt;doc xml:space="preserve"&gt;Configure if media created from this factory can be shared between clients.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="shared" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new value&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_suspend_mode"
              c:identifier="gst_rtsp_media_factory_set_suspend_mode"&gt;
        &lt;doc xml:space="preserve"&gt;Configure how media created from this factory will be suspended.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="mode" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new #GstRTSPSuspendMode&lt;/doc&gt;
            &lt;type name="RTSPSuspendMode" c:type="GstRTSPSuspendMode"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;property name="buffer-size" writable="1" transfer-ownership="none"&gt;
        &lt;type name="guint" c:type="guint"/&gt;
      &lt;/property&gt;
      &lt;property name="eos-shutdown" writable="1" transfer-ownership="none"&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/property&gt;
      &lt;property name="launch" writable="1" transfer-ownership="none"&gt;
        &lt;type name="utf8" c:type="gchar*"/&gt;
      &lt;/property&gt;
      &lt;property name="protocols" writable="1" transfer-ownership="none"&gt;
        &lt;type name="GstRtsp.RTSPLowerTrans"/&gt;
      &lt;/property&gt;
      &lt;property name="shared" writable="1" transfer-ownership="none"&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/property&gt;
      &lt;property name="suspend-mode" writable="1" transfer-ownership="none"&gt;
        &lt;type name="RTSPSuspendMode"/&gt;
      &lt;/property&gt;
      &lt;field name="parent"&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPMediaFactoryPrivate"
              c:type="GstRTSPMediaFactoryPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
      &lt;glib:signal name="media-configure" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
      &lt;glib:signal name="media-constructed" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="RTSPMedia"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
    &lt;/class&gt;
    &lt;record name="RTSPMediaFactoryClass"
            c:type="GstRTSPMediaFactoryClass"
            glib:is-gtype-struct-for="RTSPMediaFactory"&gt;
      &lt;doc xml:space="preserve"&gt;The #GstRTSPMediaFactory class structure.&lt;/doc&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="gen_key"&gt;
        &lt;callback name="gen_key"&gt;
          &lt;return-value transfer-ownership="full"&gt;
            &lt;type name="utf8" c:type="gchar*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="factory" transfer-ownership="none"&gt;
              &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="url" transfer-ownership="none"&gt;
              &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="create_element"&gt;
        &lt;callback name="create_element"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a new #GstElement.&lt;/doc&gt;
            &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="factory" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
              &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="url" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;the url used&lt;/doc&gt;
              &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="construct"&gt;
        &lt;callback name="construct"&gt;
          &lt;return-value transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a new #GstRTSPMedia if the media could be prepared.&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="factory" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
              &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="url" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;the url used&lt;/doc&gt;
              &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="create_pipeline" introspectable="0"&gt;
        &lt;callback name="create_pipeline" introspectable="0"&gt;
          &lt;return-value&gt;
            &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="factory" transfer-ownership="none"&gt;
              &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="configure"&gt;
        &lt;callback name="configure"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="factory" transfer-ownership="none"&gt;
              &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="media_constructed"&gt;
        &lt;callback name="media_constructed"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="factory" transfer-ownership="none"&gt;
              &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="media_configure"&gt;
        &lt;callback name="media_configure"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="factory" transfer-ownership="none"&gt;
              &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="media" transfer-ownership="none"&gt;
              &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="20"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;record name="RTSPMediaFactoryPrivate"
            c:type="GstRTSPMediaFactoryPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;class name="RTSPMediaFactoryURI"
           c:symbol-prefix="rtsp_media_factory_uri"
           c:type="GstRTSPMediaFactoryURI"
           parent="RTSPMediaFactory"
           glib:type-name="GstRTSPMediaFactoryURI"
           glib:get-type="gst_rtsp_media_factory_uri_get_type"
           glib:type-struct="RTSPMediaFactoryURIClass"&gt;
      &lt;doc xml:space="preserve"&gt;A media factory that creates a pipeline to play and uri.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_media_factory_uri_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPMediaFactoryURI instance.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPMediaFactoryURI object.&lt;/doc&gt;
          &lt;type name="RTSPMediaFactoryURI" c:type="GstRTSPMediaFactoryURI*"/&gt;
        &lt;/return-value&gt;
      &lt;/constructor&gt;
      &lt;method name="get_uri" c:identifier="gst_rtsp_media_factory_uri_get_uri"&gt;
        &lt;doc xml:space="preserve"&gt;Get the URI that will provide media for this factory.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the configured URI. g_free() after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactoryURI" c:type="GstRTSPMediaFactoryURI*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_uri" c:identifier="gst_rtsp_media_factory_uri_set_uri"&gt;
        &lt;doc xml:space="preserve"&gt;Set the URI of the resource that will be streamed by this factory.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="factory" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactoryURI" c:type="GstRTSPMediaFactoryURI*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="uri" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the uri the stream&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;property name="uri" writable="1" transfer-ownership="none"&gt;
        &lt;type name="utf8" c:type="gchar*"/&gt;
      &lt;/property&gt;
      &lt;property name="use-gstpay" writable="1" transfer-ownership="none"&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/property&gt;
      &lt;field name="parent"&gt;
        &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPMediaFactoryURIPrivate"
              c:type="GstRTSPMediaFactoryURIPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/class&gt;
    &lt;record name="RTSPMediaFactoryURIClass"
            c:type="GstRTSPMediaFactoryURIClass"
            glib:is-gtype-struct-for="RTSPMediaFactoryURI"&gt;
      &lt;doc xml:space="preserve"&gt;The #GstRTSPMediaFactoryURI class structure.&lt;/doc&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="RTSPMediaFactoryClass" c:type="GstRTSPMediaFactoryClass"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;record name="RTSPMediaFactoryURIPrivate"
            c:type="GstRTSPMediaFactoryURIPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;record name="RTSPMediaPrivate" c:type="GstRTSPMediaPrivate" disguised="1"&gt;
    &lt;/record&gt;
    &lt;enumeration name="RTSPMediaStatus" c:type="GstRTSPMediaStatus"&gt;
      &lt;doc xml:space="preserve"&gt;The state of the media pipeline.&lt;/doc&gt;
      &lt;member name="unprepared"
              value="0"
              c:identifier="GST_RTSP_MEDIA_STATUS_UNPREPARED"&gt;
        &lt;doc xml:space="preserve"&gt;media pipeline not prerolled&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="unpreparing"
              value="1"
              c:identifier="GST_RTSP_MEDIA_STATUS_UNPREPARING"&gt;
        &lt;doc xml:space="preserve"&gt;media pipeline is busy doing a clean
                                    shutdown.&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="preparing"
              value="2"
              c:identifier="GST_RTSP_MEDIA_STATUS_PREPARING"&gt;
        &lt;doc xml:space="preserve"&gt;media pipeline is prerolling&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="prepared"
              value="3"
              c:identifier="GST_RTSP_MEDIA_STATUS_PREPARED"&gt;
        &lt;doc xml:space="preserve"&gt;media pipeline is prerolled&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="suspended"
              value="4"
              c:identifier="GST_RTSP_MEDIA_STATUS_SUSPENDED"&gt;
        &lt;doc xml:space="preserve"&gt;media is suspended&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="error"
              value="5"
              c:identifier="GST_RTSP_MEDIA_STATUS_ERROR"&gt;
        &lt;doc xml:space="preserve"&gt;media pipeline is in error&lt;/doc&gt;
      &lt;/member&gt;
    &lt;/enumeration&gt;
    &lt;class name="RTSPMountPoints"
           c:symbol-prefix="rtsp_mount_points"
           c:type="GstRTSPMountPoints"
           parent="GObject.Object"
           glib:type-name="GstRTSPMountPoints"
           glib:get-type="gst_rtsp_mount_points_get_type"
           glib:type-struct="RTSPMountPointsClass"&gt;
      &lt;doc xml:space="preserve"&gt;Creates a #GstRTSPMediaFactory object for a given url.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_mount_points_new"&gt;
        &lt;doc xml:space="preserve"&gt;Make a new mount points object.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPMountPoints&lt;/doc&gt;
          &lt;type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/&gt;
        &lt;/return-value&gt;
      &lt;/constructor&gt;
      &lt;virtual-method name="make_path" invoker="make_path"&gt;
        &lt;doc xml:space="preserve"&gt;Make a path string from @url.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a path string for @url, g_free() after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="mounts" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMountPoints&lt;/doc&gt;
            &lt;type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="url" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPUrl&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;method name="add_factory"
              c:identifier="gst_rtsp_mount_points_add_factory"&gt;
        &lt;doc xml:space="preserve"&gt;Attach @factory to the mount point @path in @mounts.

@path is of the form (/node)+. Any previous mount point will be freed.

Ownership is taken of the reference on @factory so that @factory should not be
used after calling this function.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="mounts" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMountPoints&lt;/doc&gt;
            &lt;type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="path" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a mount point&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="factory" transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMediaFactory&lt;/doc&gt;
            &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="make_path" c:identifier="gst_rtsp_mount_points_make_path"&gt;
        &lt;doc xml:space="preserve"&gt;Make a path string from @url.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a path string for @url, g_free() after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="mounts" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMountPoints&lt;/doc&gt;
            &lt;type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="url" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPUrl&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="match" c:identifier="gst_rtsp_mount_points_match"&gt;
        &lt;doc xml:space="preserve"&gt;Find the factory in @mounts that has the longest match with @path.

If @matched is %NULL, @path will match the factory exactly otherwise
the amount of characters that matched is returned in @matched.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPMediaFactory for @path.
         g_object_unref() after usage.&lt;/doc&gt;
          &lt;type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="mounts" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMountPoints&lt;/doc&gt;
            &lt;type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="path" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a mount point&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="matched"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;the amount of @path matched&lt;/doc&gt;
            &lt;type name="gint" c:type="gint*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="remove_factory"
              c:identifier="gst_rtsp_mount_points_remove_factory"&gt;
        &lt;doc xml:space="preserve"&gt;Remove the #GstRTSPMediaFactory associated with @path in @mounts.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="mounts" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMountPoints&lt;/doc&gt;
            &lt;type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="path" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a mount point&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;field name="parent"&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPMountPointsPrivate"
              c:type="GstRTSPMountPointsPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/class&gt;
    &lt;record name="RTSPMountPointsClass"
            c:type="GstRTSPMountPointsClass"
            glib:is-gtype-struct-for="RTSPMountPoints"&gt;
      &lt;doc xml:space="preserve"&gt;The class for the media mounts object.&lt;/doc&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="make_path"&gt;
        &lt;callback name="make_path"&gt;
          &lt;return-value transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a path string for @url, g_free() after usage.&lt;/doc&gt;
            &lt;type name="utf8" c:type="gchar*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="mounts" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;a #GstRTSPMountPoints&lt;/doc&gt;
              &lt;type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="url" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;a #GstRTSPUrl&lt;/doc&gt;
              &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;record name="RTSPMountPointsPrivate"
            c:type="GstRTSPMountPointsPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;record name="RTSPPermissions"
            c:type="GstRTSPPermissions"
            glib:type-name="GstRTSPPermissions"
            glib:get-type="gst_rtsp_permissions_get_type"
            c:symbol-prefix="rtsp_permissions"&gt;
      &lt;doc xml:space="preserve"&gt;The opaque permissions structure. It is used to define the permissions
of objects in different roles.&lt;/doc&gt;
      &lt;field name="mini_object" writable="1"&gt;
        &lt;type name="Gst.MiniObject" c:type="GstMiniObject"/&gt;
      &lt;/field&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_permissions_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new empty Authorization permissions.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new empty authorization permissions.&lt;/doc&gt;
          &lt;type name="RTSPPermissions" c:type="GstRTSPPermissions*"/&gt;
        &lt;/return-value&gt;
      &lt;/constructor&gt;
      &lt;method name="add_role"
              c:identifier="gst_rtsp_permissions_add_role"
              introspectable="0"&gt;
        &lt;doc xml:space="preserve"&gt;Add a new @role to @permissions with the given variables. The fields
are the same layout as gst_structure_new().&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="permissions" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPPermissions&lt;/doc&gt;
            &lt;type name="RTSPPermissions" c:type="GstRTSPPermissions*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="role" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a role&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="fieldname" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the first field name&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="..." transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;additional arguments&lt;/doc&gt;
            &lt;varargs/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="add_role_valist"
              c:identifier="gst_rtsp_permissions_add_role_valist"
              introspectable="0"&gt;
        &lt;doc xml:space="preserve"&gt;Add a new @role to @permissions with the given variables. Structure fields
are set according to the varargs in a manner similar to gst_structure_new().&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="permissions" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPPermissions&lt;/doc&gt;
            &lt;type name="RTSPPermissions" c:type="GstRTSPPermissions*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="role" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a role&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="fieldname" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the first field name&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="var_args" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;additional fields to add&lt;/doc&gt;
            &lt;type name="va_list" c:type="va_list"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_role" c:identifier="gst_rtsp_permissions_get_role"&gt;
        &lt;doc xml:space="preserve"&gt;Get all permissions for @role in @permissions.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the structure with permissions for @role.&lt;/doc&gt;
          &lt;type name="Gst.Structure" c:type="const GstStructure*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="permissions" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPPermissions&lt;/doc&gt;
            &lt;type name="RTSPPermissions" c:type="GstRTSPPermissions*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="role" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a role&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_allowed" c:identifier="gst_rtsp_permissions_is_allowed"&gt;
        &lt;doc xml:space="preserve"&gt;Check if @role in @permissions is given permission for @permission.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if @role is allowed @permission.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="permissions" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPPermissions&lt;/doc&gt;
            &lt;type name="RTSPPermissions" c:type="GstRTSPPermissions*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="role" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a role&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="permission" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a permission&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="remove_role"
              c:identifier="gst_rtsp_permissions_remove_role"&gt;
        &lt;doc xml:space="preserve"&gt;Remove all permissions for @role in @permissions.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="permissions" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPPermissions&lt;/doc&gt;
            &lt;type name="RTSPPermissions" c:type="GstRTSPPermissions*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="role" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a role&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
    &lt;/record&gt;
    &lt;callback name="RTSPSendFunc" c:type="GstRTSPSendFunc"&gt;
      &lt;doc xml:space="preserve"&gt;Function registered with gst_rtsp_stream_transport_set_callbacks() and
called when @buffer must be sent on @channel.&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;doc xml:space="preserve"&gt;%TRUE on success&lt;/doc&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="buffer" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstBuffer&lt;/doc&gt;
          &lt;type name="Gst.Buffer" c:type="GstBuffer*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="channel" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a channel&lt;/doc&gt;
          &lt;type name="guint8" c:type="guint8"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="user_data" transfer-ownership="none" closure="2"&gt;
          &lt;doc xml:space="preserve"&gt;user data&lt;/doc&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/callback&gt;
    &lt;class name="RTSPServer"
           c:symbol-prefix="rtsp_server"
           c:type="GstRTSPServer"
           parent="GObject.Object"
           glib:type-name="GstRTSPServer"
           glib:get-type="gst_rtsp_server_get_type"
           glib:type-struct="RTSPServerClass"&gt;
      &lt;doc xml:space="preserve"&gt;This object listens on a port, creates and manages the clients connected to
it.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_server_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPServer instance.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
        &lt;/return-value&gt;
      &lt;/constructor&gt;
      &lt;function name="io_func" c:identifier="gst_rtsp_server_io_func"&gt;
        &lt;doc xml:space="preserve"&gt;A default #GSocketSourceFunc that creates a new #GstRTSPClient to accept and handle a
new connection on @socket or @server.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;TRUE if the source could be connected, FALSE if an error occured.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="socket" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GSocket&lt;/doc&gt;
            &lt;type name="Gio.Socket" c:type="GSocket*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="condition" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the condition on @source&lt;/doc&gt;
            &lt;type name="GLib.IOCondition" c:type="GIOCondition"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/function&gt;
      &lt;virtual-method name="client_connected"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="client" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="create_client" introspectable="0"&gt;
        &lt;return-value&gt;
          &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;method name="attach" c:identifier="gst_rtsp_server_attach"&gt;
        &lt;doc xml:space="preserve"&gt;Attaches @server to @context. When the mainloop for @context is run, the
server will be dispatched. When @context is %NULL, the default context will be
used).

This function should be called when the server properties and urls are fully
configured and the server is ready to start.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the ID (greater than 0) for the source within the GMainContext.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="context" transfer-ownership="none" allow-none="1"&gt;
            &lt;doc xml:space="preserve"&gt;a #GMainContext&lt;/doc&gt;
            &lt;type name="GLib.MainContext" c:type="GMainContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="client_filter"
              c:identifier="gst_rtsp_server_client_filter"&gt;
        &lt;doc xml:space="preserve"&gt;Call @func for each client managed by @server. The result value of @func
determines what happens to the client. @func will be called with @server
locked so no further actions on @server can be performed from @func.

If @func returns #GST_RTSP_FILTER_REMOVE, the client will be removed from
@server.

If @func returns #GST_RTSP_FILTER_KEEP, the client will remain in @server.

If @func returns #GST_RTSP_FILTER_REF, the client will remain in @server but
will also be added with an additional ref to the result #GList of this
function..

When @func is %NULL, #GST_RTSP_FILTER_REF will be assumed for each client.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a #GList with all
clients for which @func returned #GST_RTSP_FILTER_REF. After usage, each
element in the #GList should be unreffed before the list is freed.&lt;/doc&gt;
          &lt;type name="GLib.List" c:type="GList*"&gt;
            &lt;type name="RTSPClient"/&gt;
          &lt;/type&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="func"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="call"
                     closure="1"&gt;
            &lt;doc xml:space="preserve"&gt;a callback&lt;/doc&gt;
            &lt;type name="RTSPServerClientFilterFunc"
                  c:type="GstRTSPServerClientFilterFunc"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="user_data" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;user data passed to @func&lt;/doc&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="create_socket"
              c:identifier="gst_rtsp_server_create_socket"
              throws="1"&gt;
        &lt;doc xml:space="preserve"&gt;Create a #GSocket for @server. The socket will listen on the
configured service.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GSocket for @server or %NULL when an error occured.&lt;/doc&gt;
          &lt;type name="Gio.Socket" c:type="GSocket*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1"&gt;
            &lt;doc xml:space="preserve"&gt;a #GCancellable&lt;/doc&gt;
            &lt;type name="Gio.Cancellable" c:type="GCancellable*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="create_source"
              c:identifier="gst_rtsp_server_create_source"
              throws="1"&gt;
        &lt;doc xml:space="preserve"&gt;Create a #GSource for @server. The new source will have a default
#GSocketSourceFunc of gst_rtsp_server_io_func().

@cancellable if not %NULL can be used to cancel the source, which will cause
the source to trigger, reporting the current condition (which is likely 0
unless cancellation happened at the same time as a condition change). You can
check for this in the callback using g_cancellable_is_cancelled().&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GSource for @server or %NULL when an error occured. Free with
g_source_unref ()&lt;/doc&gt;
          &lt;type name="GLib.Source" c:type="GSource*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1"&gt;
            &lt;doc xml:space="preserve"&gt;a #GCancellable or %NULL.&lt;/doc&gt;
            &lt;type name="Gio.Cancellable" c:type="GCancellable*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_address" c:identifier="gst_rtsp_server_get_address"&gt;
        &lt;doc xml:space="preserve"&gt;Get the address on which the server will accept connections.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the server address. g_free() after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_auth" c:identifier="gst_rtsp_server_get_auth"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPAuth used as the authentication manager of @server.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPAuth of @server. g_object_unref() after
usage.&lt;/doc&gt;
          &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_backlog" c:identifier="gst_rtsp_server_get_backlog"&gt;
        &lt;doc xml:space="preserve"&gt;The maximum amount of queued requests for the server.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the server backlog.&lt;/doc&gt;
          &lt;type name="gint" c:type="gint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_bound_port"
              c:identifier="gst_rtsp_server_get_bound_port"&gt;
        &lt;doc xml:space="preserve"&gt;Get the port number where the server was bound to.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the port number&lt;/doc&gt;
          &lt;type name="gint" c:type="int"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_mount_points"
              c:identifier="gst_rtsp_server_get_mount_points"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPMountPoints used as the mount points of @server.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPMountPoints of @server. g_object_unref() after
usage.&lt;/doc&gt;
          &lt;type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_service" c:identifier="gst_rtsp_server_get_service"&gt;
        &lt;doc xml:space="preserve"&gt;Get the service on which the server will accept connections.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the service. use g_free() after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_session_pool"
              c:identifier="gst_rtsp_server_get_session_pool"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPSessionPool used as the session pool of @server.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPSessionPool used for sessions. g_object_unref() after
usage.&lt;/doc&gt;
          &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_thread_pool"
              c:identifier="gst_rtsp_server_get_thread_pool"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPThreadPool used as the thread pool of @server.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPThreadPool of @server. g_object_unref() after
usage.&lt;/doc&gt;
          &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_address" c:identifier="gst_rtsp_server_set_address"&gt;
        &lt;doc xml:space="preserve"&gt;Configure @server to accept connections on the given address.

This function must be called before the server is bound.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="address" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the address&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_auth" c:identifier="gst_rtsp_server_set_auth"&gt;
        &lt;doc xml:space="preserve"&gt;configure @auth to be used as the authentication manager of @server.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="auth" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAuth&lt;/doc&gt;
            &lt;type name="RTSPAuth" c:type="GstRTSPAuth*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_backlog" c:identifier="gst_rtsp_server_set_backlog"&gt;
        &lt;doc xml:space="preserve"&gt;configure the maximum amount of requests that may be queued for the
server.

This function must be called before the server is bound.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="backlog" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the backlog&lt;/doc&gt;
            &lt;type name="gint" c:type="gint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_mount_points"
              c:identifier="gst_rtsp_server_set_mount_points"&gt;
        &lt;doc xml:space="preserve"&gt;configure @mounts to be used as the mount points of @server.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="mounts" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMountPoints&lt;/doc&gt;
            &lt;type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_service" c:identifier="gst_rtsp_server_set_service"&gt;
        &lt;doc xml:space="preserve"&gt;Configure @server to accept connections on the given service.
@service should be a string containing the service name (see services(5)) or
a string containing a port number between 1 and 65535.

When @service is set to "0", the server will listen on a random free
port. The actual used port can be retrieved with
gst_rtsp_server_get_bound_port().

This function must be called before the server is bound.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="service" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the service&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_session_pool"
              c:identifier="gst_rtsp_server_set_session_pool"&gt;
        &lt;doc xml:space="preserve"&gt;configure @pool to be used as the session pool of @server.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool&lt;/doc&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_thread_pool"
              c:identifier="gst_rtsp_server_set_thread_pool"&gt;
        &lt;doc xml:space="preserve"&gt;configure @pool to be used as the thread pool of @server.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPThreadPool&lt;/doc&gt;
            &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="transfer_connection"
              c:identifier="gst_rtsp_server_transfer_connection"&gt;
        &lt;doc xml:space="preserve"&gt;Take an existing network socket and use it for an RTSP connection. This
is used when transferring a socket from an HTTP server which should be used
as an RTSP over HTTP tunnel. The @initial_buffer contains any remaining data
that the HTTP server read from the socket while parsing the HTTP header.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;TRUE if all was ok, FALSE if an error occured.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="server" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPServer&lt;/doc&gt;
            &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="socket" transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a network socket&lt;/doc&gt;
            &lt;type name="Gio.Socket" c:type="GSocket*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="ip" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the IP address of the remote client&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="port" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the port used by the other end&lt;/doc&gt;
            &lt;type name="gint" c:type="gint"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="initial_buffer" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;any initial data that was already read from the socket&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;property name="address" writable="1" transfer-ownership="none"&gt;
        &lt;type name="utf8" c:type="gchar*"/&gt;
      &lt;/property&gt;
      &lt;property name="backlog" writable="1" transfer-ownership="none"&gt;
        &lt;type name="gint" c:type="gint"/&gt;
      &lt;/property&gt;
      &lt;property name="bound-port" transfer-ownership="none"&gt;
        &lt;type name="gint" c:type="gint"/&gt;
      &lt;/property&gt;
      &lt;property name="mount-points" writable="1" transfer-ownership="none"&gt;
        &lt;type name="RTSPMountPoints"/&gt;
      &lt;/property&gt;
      &lt;property name="service" writable="1" transfer-ownership="none"&gt;
        &lt;type name="utf8" c:type="gchar*"/&gt;
      &lt;/property&gt;
      &lt;property name="session-pool" writable="1" transfer-ownership="none"&gt;
        &lt;type name="RTSPSessionPool"/&gt;
      &lt;/property&gt;
      &lt;field name="parent"&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPServerPrivate" c:type="GstRTSPServerPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
      &lt;glib:signal name="client-connected" when="last"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="object" transfer-ownership="none"&gt;
            &lt;type name="RTSPClient"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/glib:signal&gt;
    &lt;/class&gt;
    &lt;record name="RTSPServerClass"
            c:type="GstRTSPServerClass"
            glib:is-gtype-struct-for="RTSPServer"&gt;
      &lt;doc xml:space="preserve"&gt;The RTSP server class structure&lt;/doc&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="create_client" introspectable="0"&gt;
        &lt;callback name="create_client" introspectable="0"&gt;
          &lt;return-value&gt;
            &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="server" transfer-ownership="none"&gt;
              &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="client_connected"&gt;
        &lt;callback name="client_connected"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="server" transfer-ownership="none"&gt;
              &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="client" transfer-ownership="none"&gt;
              &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="20"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;callback name="RTSPServerClientFilterFunc"
              c:type="GstRTSPServerClientFilterFunc"&gt;
      &lt;doc xml:space="preserve"&gt;This function will be called by the gst_rtsp_server_client_filter(). An
implementation should return a value of #GstRTSPFilterResult.

When this function returns #GST_RTSP_FILTER_REMOVE, @client will be removed
from @server.

A return value of #GST_RTSP_FILTER_KEEP will leave @client untouched in
@server.

A value of #GST_RTSP_FILTER_REF will add @client to the result #GList of
gst_rtsp_server_client_filter().&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;doc xml:space="preserve"&gt;a #GstRTSPFilterResult.&lt;/doc&gt;
        &lt;type name="RTSPFilterResult" c:type="GstRTSPFilterResult"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="server" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPServer object&lt;/doc&gt;
          &lt;type name="RTSPServer" c:type="GstRTSPServer*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="client" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPClient in @server&lt;/doc&gt;
          &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="user_data" transfer-ownership="none" closure="2"&gt;
          &lt;doc xml:space="preserve"&gt;user data that has been given to gst_rtsp_server_client_filter()&lt;/doc&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/callback&gt;
    &lt;record name="RTSPServerPrivate"
            c:type="GstRTSPServerPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;class name="RTSPSession"
           c:symbol-prefix="rtsp_session"
           c:type="GstRTSPSession"
           parent="GObject.Object"
           glib:type-name="GstRTSPSession"
           glib:get-type="gst_rtsp_session_get_type"
           glib:type-struct="RTSPSessionClass"&gt;
      &lt;doc xml:space="preserve"&gt;Session information kept by the server for a specific client.
One client session, identified with a session id, can handle multiple medias
identified with the url of a media.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_session_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPSession instance with @sessionid.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="sessionid" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a session id&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/constructor&gt;
      &lt;method name="allow_expire" c:identifier="gst_rtsp_session_allow_expire"&gt;
        &lt;doc xml:space="preserve"&gt;Allow @session to expire. This method must be called an equal
amount of time as gst_rtsp_session_prevent_expire().&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="session" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="filter" c:identifier="gst_rtsp_session_filter"&gt;
        &lt;doc xml:space="preserve"&gt;Call @func for each media in @sess. The result value of @func determines
what happens to the media. @func will be called with @sess
locked so no further actions on @sess can be performed from @func.

If @func returns #GST_RTSP_FILTER_REMOVE, the media will be removed from
@sess.

If @func returns #GST_RTSP_FILTER_KEEP, the media will remain in @sess.

If @func returns #GST_RTSP_FILTER_REF, the media will remain in @sess but
will also be added with an additional ref to the result #GList of this
function..

When @func is %NULL, #GST_RTSP_FILTER_REF will be assumed for all media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a GList with all
media for which @func returned #GST_RTSP_FILTER_REF. After usage, each
element in the #GList should be unreffed before the list is freed.&lt;/doc&gt;
          &lt;type name="GLib.List" c:type="GList*"&gt;
            &lt;type name="RTSPSessionMedia"/&gt;
          &lt;/type&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="sess" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="func"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="call"
                     closure="1"&gt;
            &lt;doc xml:space="preserve"&gt;a callback&lt;/doc&gt;
            &lt;type name="RTSPSessionFilterFunc"
                  c:type="GstRTSPSessionFilterFunc"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="user_data" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;user data passed to @func&lt;/doc&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_header" c:identifier="gst_rtsp_session_get_header"&gt;
        &lt;doc xml:space="preserve"&gt;Get the string that can be placed in the Session header field.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the Session header of @session. g_free() after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="session" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_media" c:identifier="gst_rtsp_session_get_media"&gt;
        &lt;doc xml:space="preserve"&gt;Get the session media for @path. @matched will contain the number of matched
characters of @path.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the configuration for @path in @sess.&lt;/doc&gt;
          &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="sess" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="path" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the path for the media&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="matched"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;the amount of matched characters&lt;/doc&gt;
            &lt;type name="gint" c:type="gint*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_sessionid"
              c:identifier="gst_rtsp_session_get_sessionid"&gt;
        &lt;doc xml:space="preserve"&gt;Get the sessionid of @session.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the sessionid of @session. The value remains valid as long as
@session is alive.&lt;/doc&gt;
          &lt;type name="utf8" c:type="const gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="session" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_timeout" c:identifier="gst_rtsp_session_get_timeout"&gt;
        &lt;doc xml:space="preserve"&gt;Get the timeout value of @session.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the timeout of @session in seconds.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="session" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_expired" c:identifier="gst_rtsp_session_is_expired"&gt;
        &lt;doc xml:space="preserve"&gt;Check if @session timeout out.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if @session timed out&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="session" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="now" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the current system time&lt;/doc&gt;
            &lt;type name="GLib.TimeVal" c:type="GTimeVal*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="manage_media" c:identifier="gst_rtsp_session_manage_media"&gt;
        &lt;doc xml:space="preserve"&gt;Manage the media object @obj in @sess. @path will be used to retrieve this
media from the session with gst_rtsp_session_get_media().

Ownership is taken from @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a new @GstRTSPSessionMedia object.&lt;/doc&gt;
          &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="sess" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="path" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the path for the media&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="media" transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="next_timeout" c:identifier="gst_rtsp_session_next_timeout"&gt;
        &lt;doc xml:space="preserve"&gt;Get the amount of milliseconds till the session will expire.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the amount of milliseconds since the session will time out.&lt;/doc&gt;
          &lt;type name="gint" c:type="gint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="session" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="now" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the current system time&lt;/doc&gt;
            &lt;type name="GLib.TimeVal" c:type="GTimeVal*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="prevent_expire"
              c:identifier="gst_rtsp_session_prevent_expire"&gt;
        &lt;doc xml:space="preserve"&gt;Prevent @session from expiring.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="session" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="release_media"
              c:identifier="gst_rtsp_session_release_media"&gt;
        &lt;doc xml:space="preserve"&gt;Release the managed @media in @sess, freeing the memory allocated by it.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if there are more media session left in @sess.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="sess" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_timeout" c:identifier="gst_rtsp_session_set_timeout"&gt;
        &lt;doc xml:space="preserve"&gt;Configure @session for a timeout of @timeout seconds. The session will be
cleaned up when there is no activity for @timeout seconds.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="session" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="timeout" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new timeout&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="touch" c:identifier="gst_rtsp_session_touch"&gt;
        &lt;doc xml:space="preserve"&gt;Update the last_access time of the session to the current time.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="session" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;property name="sessionid"
                writable="1"
                construct-only="1"
                transfer-ownership="none"&gt;
        &lt;type name="utf8" c:type="gchar*"/&gt;
      &lt;/property&gt;
      &lt;property name="timeout" writable="1" transfer-ownership="none"&gt;
        &lt;type name="guint" c:type="guint"/&gt;
      &lt;/property&gt;
      &lt;field name="parent"&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPSessionPrivate" c:type="GstRTSPSessionPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/class&gt;
    &lt;record name="RTSPSessionClass"
            c:type="GstRTSPSessionClass"
            glib:is-gtype-struct-for="RTSPSession"&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;callback name="RTSPSessionFilterFunc" c:type="GstRTSPSessionFilterFunc"&gt;
      &lt;doc xml:space="preserve"&gt;This function will be called by the gst_rtsp_session_filter(). An
implementation should return a value of #GstRTSPFilterResult.

When this function returns #GST_RTSP_FILTER_REMOVE, @media will be removed
from @sess.

A return value of #GST_RTSP_FILTER_KEEP will leave @media untouched in
@sess.

A value of GST_RTSP_FILTER_REF will add @media to the result #GList of
gst_rtsp_session_filter().&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;doc xml:space="preserve"&gt;a #GstRTSPFilterResult.&lt;/doc&gt;
        &lt;type name="RTSPFilterResult" c:type="GstRTSPFilterResult"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="sess" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPSession object&lt;/doc&gt;
          &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="media" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionMedia in @sess&lt;/doc&gt;
          &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="user_data" transfer-ownership="none" closure="2"&gt;
          &lt;doc xml:space="preserve"&gt;user data that has been given to gst_rtsp_session_filter()&lt;/doc&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/callback&gt;
    &lt;class name="RTSPSessionMedia"
           c:symbol-prefix="rtsp_session_media"
           c:type="GstRTSPSessionMedia"
           parent="GObject.Object"
           glib:type-name="GstRTSPSessionMedia"
           glib:get-type="gst_rtsp_session_media_get_type"
           glib:type-struct="RTSPSessionMediaClass"&gt;
      &lt;doc xml:space="preserve"&gt;State of a client session regarding a specific media identified by path.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_session_media_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPSessionMedia that manages the streams
in @media for @path. @media should be prepared.

Ownership is taken of @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPSessionMedia.&lt;/doc&gt;
          &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="path" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the path&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the #GstRTSPMedia&lt;/doc&gt;
            &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/constructor&gt;
      &lt;method name="alloc_channels"
              c:identifier="gst_rtsp_session_media_alloc_channels"&gt;
        &lt;doc xml:space="preserve"&gt;Fill @range with the next available min and max channels for
interleaved transport.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionMedia&lt;/doc&gt;
            &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="range" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPRange&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPRange" c:type="GstRTSPRange*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_base_time"
              c:identifier="gst_rtsp_session_media_get_base_time"&gt;
        &lt;doc xml:space="preserve"&gt;Get the base_time of the #GstRTSPMedia in @media&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the base_time of the media.&lt;/doc&gt;
          &lt;type name="Gst.ClockTime" c:type="GstClockTime"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionMedia&lt;/doc&gt;
            &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_media" c:identifier="gst_rtsp_session_media_get_media"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPMedia that was used when constructing @media&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPMedia of @media. Remains valid as long
        as @media is valid.&lt;/doc&gt;
          &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionMedia&lt;/doc&gt;
            &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_rtpinfo"
              c:identifier="gst_rtsp_session_media_get_rtpinfo"&gt;
        &lt;doc xml:space="preserve"&gt;Retrieve the RTP-Info header string for all streams in @media
with configured transports.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;The RTP-Info as a string or %NULL when
  no RTP-Info could be generated, g_free() after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionMedia&lt;/doc&gt;
            &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_rtsp_state"
              c:identifier="gst_rtsp_session_media_get_rtsp_state"&gt;
        &lt;doc xml:space="preserve"&gt;Get the current RTSP state of @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the current RTSP state of @media.&lt;/doc&gt;
          &lt;type name="GstRtsp.RTSPState" c:type="GstRTSPState"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionMedia&lt;/doc&gt;
            &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_transport"
              c:identifier="gst_rtsp_session_media_get_transport"&gt;
        &lt;doc xml:space="preserve"&gt;Get a previously created #GstRTSPStreamTransport for the stream at @idx.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport that is valid until the
session of @media is unreffed.&lt;/doc&gt;
          &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionMedia&lt;/doc&gt;
            &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="idx" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the stream index&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="matches" c:identifier="gst_rtsp_session_media_matches"&gt;
        &lt;doc xml:space="preserve"&gt;Check if the path of @media matches @path. It @path matches, the amount of
matched characters is returned in @matched.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE when @path matches the path of @media.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionMedia&lt;/doc&gt;
            &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="path" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a path&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="matched"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;the amount of matched characters of @path&lt;/doc&gt;
            &lt;type name="gint" c:type="gint*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_rtsp_state"
              c:identifier="gst_rtsp_session_media_set_rtsp_state"&gt;
        &lt;doc xml:space="preserve"&gt;Set the RTSP state of @media to @state.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionMedia&lt;/doc&gt;
            &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="state" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPState&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPState" c:type="GstRTSPState"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_state" c:identifier="gst_rtsp_session_media_set_state"&gt;
        &lt;doc xml:space="preserve"&gt;Tell the media object @media to change to @state.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionMedia&lt;/doc&gt;
            &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="state" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new state&lt;/doc&gt;
            &lt;type name="Gst.State" c:type="GstState"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_transport"
              c:identifier="gst_rtsp_session_media_set_transport"&gt;
        &lt;doc xml:space="preserve"&gt;Configure the transport for @stream to @tr in @media.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the new or updated #GstRTSPStreamTransport for @stream.&lt;/doc&gt;
          &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="media" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionMedia&lt;/doc&gt;
            &lt;type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="tr" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPTransport&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPTransport" c:type="GstRTSPTransport*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;field name="parent"&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPSessionMediaPrivate"
              c:type="GstRTSPSessionMediaPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/class&gt;
    &lt;record name="RTSPSessionMediaClass"
            c:type="GstRTSPSessionMediaClass"
            glib:is-gtype-struct-for="RTSPSessionMedia"&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;record name="RTSPSessionMediaPrivate"
            c:type="GstRTSPSessionMediaPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;class name="RTSPSessionPool"
           c:symbol-prefix="rtsp_session_pool"
           c:type="GstRTSPSessionPool"
           parent="GObject.Object"
           glib:type-name="GstRTSPSessionPool"
           glib:get-type="gst_rtsp_session_pool_get_type"
           glib:type-struct="RTSPSessionPoolClass"&gt;
      &lt;doc xml:space="preserve"&gt;An object that keeps track of the active sessions. This object is usually
attached to a #GstRTSPServer object to manage the sessions in that server.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_session_pool_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPSessionPool instance.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;A new #GstRTSPSessionPool. g_object_unref() after usage.&lt;/doc&gt;
          &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
        &lt;/return-value&gt;
      &lt;/constructor&gt;
      &lt;virtual-method name="create_session" introspectable="0"&gt;
        &lt;return-value&gt;
          &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="id" transfer-ownership="none"&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="create_session_id"&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;method name="cleanup" c:identifier="gst_rtsp_session_pool_cleanup"&gt;
        &lt;doc xml:space="preserve"&gt;Inspect all the sessions in @pool and remove the sessions that are inactive
for more than their timeout.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the amount of sessions that got removed.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool&lt;/doc&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="create" c:identifier="gst_rtsp_session_pool_create"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPSession object in @pool.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPSession.&lt;/doc&gt;
          &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool&lt;/doc&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="create_watch"
              c:identifier="gst_rtsp_session_pool_create_watch"&gt;
        &lt;doc xml:space="preserve"&gt;A GSource that will be dispatched when the session should be cleaned up.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;type name="GLib.Source" c:type="GSource*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool&lt;/doc&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="filter" c:identifier="gst_rtsp_session_pool_filter"&gt;
        &lt;doc xml:space="preserve"&gt;Call @func for each session in @pool. The result value of @func determines
what happens to the session. @func will be called with the session pool
locked so no further actions on @pool can be performed from @func.

If @func returns #GST_RTSP_FILTER_REMOVE, the session will be removed from
@pool.

If @func returns #GST_RTSP_FILTER_KEEP, the session will remain in @pool.

If @func returns #GST_RTSP_FILTER_REF, the session will remain in @pool but
will also be added with an additional ref to the result GList of this
function..

When @func is %NULL, #GST_RTSP_FILTER_REF will be assumed for all sessions.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a GList with all
sessions for which @func returned #GST_RTSP_FILTER_REF. After usage, each
element in the GList should be unreffed before the list is freed.&lt;/doc&gt;
          &lt;type name="GLib.List" c:type="GList*"&gt;
            &lt;type name="RTSPSession"/&gt;
          &lt;/type&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool&lt;/doc&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="func"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="call"
                     closure="1"&gt;
            &lt;doc xml:space="preserve"&gt;a callback&lt;/doc&gt;
            &lt;type name="RTSPSessionPoolFilterFunc"
                  c:type="GstRTSPSessionPoolFilterFunc"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="user_data" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;user data passed to @func&lt;/doc&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="find" c:identifier="gst_rtsp_session_pool_find"&gt;
        &lt;doc xml:space="preserve"&gt;Find the session with @sessionid in @pool. The access time of the session
will be updated with gst_rtsp_session_touch().&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPSession with @sessionid or %NULL when the session did
not exist. g_object_unref() after usage.&lt;/doc&gt;
          &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the pool to search&lt;/doc&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="sessionid" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the session id&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_max_sessions"
              c:identifier="gst_rtsp_session_pool_get_max_sessions"&gt;
        &lt;doc xml:space="preserve"&gt;Get the maximum allowed number of sessions in @pool. 0 means an unlimited
amount of sessions.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the maximum allowed number of sessions.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool&lt;/doc&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_n_sessions"
              c:identifier="gst_rtsp_session_pool_get_n_sessions"&gt;
        &lt;doc xml:space="preserve"&gt;Get the amount of active sessions in @pool.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the amount of active sessions in @pool.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool&lt;/doc&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="remove" c:identifier="gst_rtsp_session_pool_remove"&gt;
        &lt;doc xml:space="preserve"&gt;Remove @sess from @pool, releasing the ref that the pool has on @sess.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if the session was found and removed.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool&lt;/doc&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="sess" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSession&lt;/doc&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_max_sessions"
              c:identifier="gst_rtsp_session_pool_set_max_sessions"&gt;
        &lt;doc xml:space="preserve"&gt;Configure the maximum allowed number of sessions in @pool to @max.
A value of 0 means an unlimited amount of sessions.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool&lt;/doc&gt;
            &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="max" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the maximum number of sessions&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;property name="max-sessions" writable="1" transfer-ownership="none"&gt;
        &lt;type name="guint" c:type="guint"/&gt;
      &lt;/property&gt;
      &lt;field name="parent"&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPSessionPoolPrivate"
              c:type="GstRTSPSessionPoolPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/class&gt;
    &lt;record name="RTSPSessionPoolClass"
            c:type="GstRTSPSessionPoolClass"
            glib:is-gtype-struct-for="RTSPSessionPool"&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="create_session_id"&gt;
        &lt;callback name="create_session_id"&gt;
          &lt;return-value transfer-ownership="full"&gt;
            &lt;type name="utf8" c:type="gchar*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="pool" transfer-ownership="none"&gt;
              &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="create_session" introspectable="0"&gt;
        &lt;callback name="create_session" introspectable="0"&gt;
          &lt;return-value&gt;
            &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="pool" transfer-ownership="none"&gt;
              &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="id" transfer-ownership="none"&gt;
              &lt;type name="utf8" c:type="const gchar*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="20"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;callback name="RTSPSessionPoolFilterFunc"
              c:type="GstRTSPSessionPoolFilterFunc"&gt;
      &lt;doc xml:space="preserve"&gt;This function will be called by the gst_rtsp_session_pool_filter(). An
implementation should return a value of #GstRTSPFilterResult.

When this function returns #GST_RTSP_FILTER_REMOVE, @session will be removed
from @pool.

A return value of #GST_RTSP_FILTER_KEEP will leave @session untouched in
@pool.

A value of GST_RTSP_FILTER_REF will add @session to the result #GList of
gst_rtsp_session_pool_filter().&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;doc xml:space="preserve"&gt;a #GstRTSPFilterResult.&lt;/doc&gt;
        &lt;type name="RTSPFilterResult" c:type="GstRTSPFilterResult"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="pool" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool object&lt;/doc&gt;
          &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="session" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPSession in @pool&lt;/doc&gt;
          &lt;type name="RTSPSession" c:type="GstRTSPSession*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="user_data" transfer-ownership="none" closure="2"&gt;
          &lt;doc xml:space="preserve"&gt;user data that has been given to gst_rtsp_session_pool_filter()&lt;/doc&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/callback&gt;
    &lt;callback name="RTSPSessionPoolFunc" c:type="GstRTSPSessionPoolFunc"&gt;
      &lt;doc xml:space="preserve"&gt;The function that will be called from the GSource watch on the session pool.

The function will be called when the pool must be cleaned up because one or
more sessions timed out.&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;doc xml:space="preserve"&gt;%FALSE if the source should be removed.&lt;/doc&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="pool" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPSessionPool object&lt;/doc&gt;
          &lt;type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="user_data" transfer-ownership="none" closure="1"&gt;
          &lt;doc xml:space="preserve"&gt;user data that has been given when registering the handler&lt;/doc&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/callback&gt;
    &lt;record name="RTSPSessionPoolPrivate"
            c:type="GstRTSPSessionPoolPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;record name="RTSPSessionPrivate"
            c:type="GstRTSPSessionPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;class name="RTSPStream"
           c:symbol-prefix="rtsp_stream"
           c:type="GstRTSPStream"
           parent="GObject.Object"
           glib:type-name="GstRTSPStream"
           glib:get-type="gst_rtsp_stream_get_type"
           glib:type-struct="RTSPStreamClass"&gt;
      &lt;doc xml:space="preserve"&gt;The definition of a media stream.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_stream_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new media stream with index @idx that handles RTP data on
@srcpad and has a payloader element @payloader.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPStream&lt;/doc&gt;
          &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="idx" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;an index&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="payloader" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstElement&lt;/doc&gt;
            &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="srcpad" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstPad&lt;/doc&gt;
            &lt;type name="Gst.Pad" c:type="GstPad*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/constructor&gt;
      &lt;method name="add_transport"
              c:identifier="gst_rtsp_stream_add_transport"&gt;
        &lt;doc xml:space="preserve"&gt;Add the transport in @trans to @stream. The media of @stream will
then also be send to the values configured in @trans.

@stream must be joined to a bin.

@trans must contain a valid #GstRTSPTransport.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if @trans was added&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_address_pool"
              c:identifier="gst_rtsp_stream_get_address_pool"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPAddressPool used as the address pool of @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPAddressPool of @stream. g_object_unref() after
usage.&lt;/doc&gt;
          &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_caps" c:identifier="gst_rtsp_stream_get_caps"&gt;
        &lt;doc xml:space="preserve"&gt;Retrieve the current caps of @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstCaps of @stream. use gst_caps_unref()
   after usage.&lt;/doc&gt;
          &lt;type name="Gst.Caps" c:type="GstCaps*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_control" c:identifier="gst_rtsp_stream_get_control"&gt;
        &lt;doc xml:space="preserve"&gt;Get the control string to identify this stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the control string. free after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_dscp_qos" c:identifier="gst_rtsp_stream_get_dscp_qos"&gt;
        &lt;doc xml:space="preserve"&gt;Get the configured DSCP QoS in of the outgoing sockets.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the DSCP QoS value of the outgoing sockets, or -1 if disbled.&lt;/doc&gt;
          &lt;type name="gint" c:type="gint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_index" c:identifier="gst_rtsp_stream_get_index"&gt;
        &lt;doc xml:space="preserve"&gt;Get the stream index.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the stream index.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_mtu" c:identifier="gst_rtsp_stream_get_mtu"&gt;
        &lt;doc xml:space="preserve"&gt;Get the configured MTU in the payloader of @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the MTU of the payloader.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_multicast_address"
              c:identifier="gst_rtsp_stream_get_multicast_address"&gt;
        &lt;doc xml:space="preserve"&gt;Get the multicast address of @stream for @family.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPAddress of @stream or %NULL when no address could be
allocated. gst_rtsp_address_free() after usage.&lt;/doc&gt;
          &lt;type name="RTSPAddress" c:type="GstRTSPAddress*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="family" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the #GSocketFamily&lt;/doc&gt;
            &lt;type name="Gio.SocketFamily" c:type="GSocketFamily"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_profiles" c:identifier="gst_rtsp_stream_get_profiles"&gt;
        &lt;doc xml:space="preserve"&gt;Get the allowed profiles of @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPProfile&lt;/doc&gt;
          &lt;type name="GstRtsp.RTSPProfile" c:type="GstRTSPProfile"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_protocols"
              c:identifier="gst_rtsp_stream_get_protocols"&gt;
        &lt;doc xml:space="preserve"&gt;Get the allowed protocols of @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPLowerTrans&lt;/doc&gt;
          &lt;type name="GstRtsp.RTSPLowerTrans" c:type="GstRTSPLowerTrans"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_pt" c:identifier="gst_rtsp_stream_get_pt"&gt;
        &lt;doc xml:space="preserve"&gt;Get the stream payload type.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the stream payload type.&lt;/doc&gt;
          &lt;type name="guint" c:type="guint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_rtcp_socket"
              c:identifier="gst_rtsp_stream_get_rtcp_socket"
              introspectable="0"&gt;
        &lt;doc xml:space="preserve"&gt;Get the RTCP socket from @stream for a @family.

@stream must be joined to a bin.&lt;/doc&gt;
        &lt;return-value&gt;
          &lt;doc xml:space="preserve"&gt;the RTCP socket or %NULL if no socket could be allocated for
    @family. Unref after usage&lt;/doc&gt;
          &lt;type name="Gio.Socket" c:type="GSocket*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="family" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the socket family&lt;/doc&gt;
            &lt;type name="Gio.SocketFamily" c:type="GSocketFamily"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_rtp_socket"
              c:identifier="gst_rtsp_stream_get_rtp_socket"
              introspectable="0"&gt;
        &lt;doc xml:space="preserve"&gt;Get the RTP socket from @stream for a @family.

@stream must be joined to a bin.&lt;/doc&gt;
        &lt;return-value&gt;
          &lt;doc xml:space="preserve"&gt;the RTP socket or %NULL if no socket could be allocated for @family.
    Unref after usage&lt;/doc&gt;
          &lt;type name="Gio.Socket" c:type="GSocket*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="family" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the socket family&lt;/doc&gt;
            &lt;type name="Gio.SocketFamily" c:type="GSocketFamily"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_rtpinfo" c:identifier="gst_rtsp_stream_get_rtpinfo"&gt;
        &lt;doc xml:space="preserve"&gt;Retrieve the current rtptime, seq and running-time. This is used to
construct a RTPInfo reply header.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE when rtptime, seq and running-time could be determined.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="rtptime" transfer-ownership="none" allow-none="1"&gt;
            &lt;doc xml:space="preserve"&gt;result RTP timestamp&lt;/doc&gt;
            &lt;type name="guint" c:type="guint*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="seq" transfer-ownership="none" allow-none="1"&gt;
            &lt;doc xml:space="preserve"&gt;result RTP seqnum&lt;/doc&gt;
            &lt;type name="guint" c:type="guint*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="clock_rate" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the clock rate&lt;/doc&gt;
            &lt;type name="guint" c:type="guint*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="running_time"
                     transfer-ownership="none"
                     allow-none="1"&gt;
            &lt;doc xml:space="preserve"&gt;result running-time&lt;/doc&gt;
            &lt;type name="Gst.ClockTime" c:type="GstClockTime*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_rtpsession"
              c:identifier="gst_rtsp_stream_get_rtpsession"&gt;
        &lt;doc xml:space="preserve"&gt;Get the RTP session of this stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;The RTP session of this stream. Unref after usage.&lt;/doc&gt;
          &lt;type name="GObject.Object" c:type="GObject*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_server_port"
              c:identifier="gst_rtsp_stream_get_server_port"&gt;
        &lt;doc xml:space="preserve"&gt;Fill @server_port with the port pair used by the server. This function can
only be called when @stream has been joined.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="server_port"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;result server port&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPRange" c:type="GstRTSPRange*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="family" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the port family to get&lt;/doc&gt;
            &lt;type name="Gio.SocketFamily" c:type="GSocketFamily"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_srcpad" c:identifier="gst_rtsp_stream_get_srcpad"&gt;
        &lt;doc xml:space="preserve"&gt;Get the srcpad associated with @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the srcpad. Unref after usage.&lt;/doc&gt;
          &lt;type name="Gst.Pad" c:type="GstPad*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_ssrc" c:identifier="gst_rtsp_stream_get_ssrc"&gt;
        &lt;doc xml:space="preserve"&gt;Get the SSRC used by the RTP session of this stream. This function can only
be called when @stream has been joined.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="ssrc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;result ssrc&lt;/doc&gt;
            &lt;type name="guint" c:type="guint*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="has_control" c:identifier="gst_rtsp_stream_has_control"&gt;
        &lt;doc xml:space="preserve"&gt;Check if @stream has the control string @control.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE is @stream has @control as the control string&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="control" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a control string&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_blocking" c:identifier="gst_rtsp_stream_is_blocking"&gt;
        &lt;doc xml:space="preserve"&gt;Check if @stream is blocking on a #GstBuffer.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if @stream is blocking&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_transport_supported"
              c:identifier="gst_rtsp_stream_is_transport_supported"&gt;
        &lt;doc xml:space="preserve"&gt;Check if @transport can be handled by stream&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if @transport can be handled by @stream.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="transport" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPTransport&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPTransport" c:type="GstRTSPTransport*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="join_bin" c:identifier="gst_rtsp_stream_join_bin"&gt;
        &lt;doc xml:space="preserve"&gt;Join the #GstBin @bin that contains the element @rtpbin.

@stream will link to @rtpbin, which must be inside @bin. The elements
added to @bin will be set to the state given in @state.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="bin" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstBin to join&lt;/doc&gt;
            &lt;type name="Gst.Bin" c:type="GstBin*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="rtpbin" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a rtpbin element in @bin&lt;/doc&gt;
            &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="state" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the target state of the new elements&lt;/doc&gt;
            &lt;type name="Gst.State" c:type="GstState"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="leave_bin" c:identifier="gst_rtsp_stream_leave_bin"&gt;
        &lt;doc xml:space="preserve"&gt;Remove the elements of @stream from @bin.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="bin" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstBin&lt;/doc&gt;
            &lt;type name="Gst.Bin" c:type="GstBin*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="rtpbin" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a rtpbin #GstElement&lt;/doc&gt;
            &lt;type name="Gst.Element" c:type="GstElement*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="recv_rtcp" c:identifier="gst_rtsp_stream_recv_rtcp"&gt;
        &lt;doc xml:space="preserve"&gt;Handle an RTCP buffer for the stream. This method is usually called when a
message has been received from a client using the TCP transport.

This function takes ownership of @buffer.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a GstFlowReturn.&lt;/doc&gt;
          &lt;type name="Gst.FlowReturn" c:type="GstFlowReturn"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="buffer" transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstBuffer&lt;/doc&gt;
            &lt;type name="Gst.Buffer" c:type="GstBuffer*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="recv_rtp" c:identifier="gst_rtsp_stream_recv_rtp"&gt;
        &lt;doc xml:space="preserve"&gt;Handle an RTP buffer for the stream. This method is usually called when a
message has been received from a client using the TCP transport.

This function takes ownership of @buffer.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a GstFlowReturn.&lt;/doc&gt;
          &lt;type name="Gst.FlowReturn" c:type="GstFlowReturn"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="buffer" transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstBuffer&lt;/doc&gt;
            &lt;type name="Gst.Buffer" c:type="GstBuffer*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="remove_transport"
              c:identifier="gst_rtsp_stream_remove_transport"&gt;
        &lt;doc xml:space="preserve"&gt;Remove the transport in @trans from @stream. The media of @stream will
not be sent to the values configured in @trans.

@stream must be joined to a bin.

@trans must contain a valid #GstRTSPTransport.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if @trans was removed&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="reserve_address"
              c:identifier="gst_rtsp_stream_reserve_address"&gt;
        &lt;doc xml:space="preserve"&gt;Reserve @address and @port as the address and port of @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the #GstRTSPAddress of @stream or %NULL when the address could be
reserved. gst_rtsp_address_free() after usage.&lt;/doc&gt;
          &lt;type name="RTSPAddress" c:type="GstRTSPAddress*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="address" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;an address&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="port" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a port&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="n_ports" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;n_ports&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="ttl" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a TTL&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_address_pool"
              c:identifier="gst_rtsp_stream_set_address_pool"&gt;
        &lt;doc xml:space="preserve"&gt;configure @pool to be used as the address pool of @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPAddressPool&lt;/doc&gt;
            &lt;type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_blocked" c:identifier="gst_rtsp_stream_set_blocked"&gt;
        &lt;doc xml:space="preserve"&gt;Blocks or unblocks the dataflow on @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="blocked" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;boolean indicating we should block or unblock&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_control" c:identifier="gst_rtsp_stream_set_control"&gt;
        &lt;doc xml:space="preserve"&gt;Set the control string in @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="control" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a control string&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_dscp_qos" c:identifier="gst_rtsp_stream_set_dscp_qos"&gt;
        &lt;doc xml:space="preserve"&gt;Configure the dscp qos of the outgoing sockets to @dscp_qos.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="dscp_qos" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a new dscp qos value (0-63, or -1 to disable)&lt;/doc&gt;
            &lt;type name="gint" c:type="gint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_mtu" c:identifier="gst_rtsp_stream_set_mtu"&gt;
        &lt;doc xml:space="preserve"&gt;Configure the mtu in the payloader of @stream to @mtu.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="mtu" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a new MTU&lt;/doc&gt;
            &lt;type name="guint" c:type="guint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_profiles" c:identifier="gst_rtsp_stream_set_profiles"&gt;
        &lt;doc xml:space="preserve"&gt;Configure the allowed profiles for @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="profiles" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new profiles&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPProfile" c:type="GstRTSPProfile"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_protocols"
              c:identifier="gst_rtsp_stream_set_protocols"&gt;
        &lt;doc xml:space="preserve"&gt;Configure the allowed lower transport for @stream.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="protocols" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the new flags&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPLowerTrans" c:type="GstRTSPLowerTrans"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="transport_filter"
              c:identifier="gst_rtsp_stream_transport_filter"&gt;
        &lt;doc xml:space="preserve"&gt;Call @func for each transport managed by @stream. The result value of @func
determines what happens to the transport. @func will be called with @stream
locked so no further actions on @stream can be performed from @func.

If @func returns #GST_RTSP_FILTER_REMOVE, the transport will be removed from
@stream.

If @func returns #GST_RTSP_FILTER_KEEP, the transport will remain in @stream.

If @func returns #GST_RTSP_FILTER_REF, the transport will remain in @stream but
will also be added with an additional ref to the result #GList of this
function..

When @func is %NULL, #GST_RTSP_FILTER_REF will be assumed for each transport.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a #GList with all
transports for which @func returned #GST_RTSP_FILTER_REF. After usage, each
element in the #GList should be unreffed before the list is freed.&lt;/doc&gt;
          &lt;type name="GLib.List" c:type="GList*"&gt;
            &lt;type name="RTSPStreamTransport"/&gt;
          &lt;/type&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="func"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="call"
                     closure="1"&gt;
            &lt;doc xml:space="preserve"&gt;a callback&lt;/doc&gt;
            &lt;type name="RTSPStreamTransportFilterFunc"
                  c:type="GstRTSPStreamTransportFilterFunc"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="user_data" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;user data passed to @func&lt;/doc&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;property name="control" writable="1" transfer-ownership="none"&gt;
        &lt;type name="utf8" c:type="gchar*"/&gt;
      &lt;/property&gt;
      &lt;property name="profiles" writable="1" transfer-ownership="none"&gt;
        &lt;type name="GstRtsp.RTSPProfile"/&gt;
      &lt;/property&gt;
      &lt;property name="protocols" writable="1" transfer-ownership="none"&gt;
        &lt;type name="GstRtsp.RTSPLowerTrans"/&gt;
      &lt;/property&gt;
      &lt;field name="parent"&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPStreamPrivate" c:type="GstRTSPStreamPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/class&gt;
    &lt;record name="RTSPStreamClass"
            c:type="GstRTSPStreamClass"
            glib:is-gtype-struct-for="RTSPStream"&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;record name="RTSPStreamPrivate"
            c:type="GstRTSPStreamPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;class name="RTSPStreamTransport"
           c:symbol-prefix="rtsp_stream_transport"
           c:type="GstRTSPStreamTransport"
           parent="GObject.Object"
           glib:type-name="GstRTSPStreamTransport"
           glib:get-type="gst_rtsp_stream_transport_get_type"
           glib:type-struct="RTSPStreamTransportClass"&gt;
      &lt;doc xml:space="preserve"&gt;A Transport description for a stream&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_stream_transport_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPStreamTransport that can be used to manage
@stream with transport @tr.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPStreamTransport&lt;/doc&gt;
          &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="stream" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStream&lt;/doc&gt;
            &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="tr" transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a GstRTSPTransport&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPTransport" c:type="GstRTSPTransport*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/constructor&gt;
      &lt;method name="get_rtpinfo"
              c:identifier="gst_rtsp_stream_transport_get_rtpinfo"&gt;
        &lt;doc xml:space="preserve"&gt;Get the RTP-Info string for @trans and @start_time.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;the RTPInfo string for @trans and @start_time or %NULL when
the RTP-Info could not be determined. g_free() after usage.&lt;/doc&gt;
          &lt;type name="utf8" c:type="gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="start_time" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a star time&lt;/doc&gt;
            &lt;type name="Gst.ClockTime" c:type="GstClockTime"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_stream"
              c:identifier="gst_rtsp_stream_transport_get_stream"&gt;
        &lt;doc xml:space="preserve"&gt;Get the #GstRTSPStream used when constructing @trans.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the stream used when constructing @trans.&lt;/doc&gt;
          &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_transport"
              c:identifier="gst_rtsp_stream_transport_get_transport"&gt;
        &lt;doc xml:space="preserve"&gt;Get the transport configured in @trans.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the transport configured in @trans. It remains
    valid for as long as @trans is valid.&lt;/doc&gt;
          &lt;type name="GstRtsp.RTSPTransport" c:type="const GstRTSPTransport*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_url" c:identifier="gst_rtsp_stream_transport_get_url"&gt;
        &lt;doc xml:space="preserve"&gt;Get the url configured in @trans.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the url configured in @trans. It remains
    valid for as long as @trans is valid.&lt;/doc&gt;
          &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_timed_out"
              c:identifier="gst_rtsp_stream_transport_is_timed_out"&gt;
        &lt;doc xml:space="preserve"&gt;Check if @trans is timed out.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if @trans timed out.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="keep_alive"
              c:identifier="gst_rtsp_stream_transport_keep_alive"&gt;
        &lt;doc xml:space="preserve"&gt;Signal the installed keep_alive callback for @trans.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="send_rtcp"
              c:identifier="gst_rtsp_stream_transport_send_rtcp"&gt;
        &lt;doc xml:space="preserve"&gt;Send @buffer to the installed RTCP callback for @trans.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="buffer" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstBuffer&lt;/doc&gt;
            &lt;type name="Gst.Buffer" c:type="GstBuffer*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="send_rtp"
              c:identifier="gst_rtsp_stream_transport_send_rtp"&gt;
        &lt;doc xml:space="preserve"&gt;Send @buffer to the installed RTP callback for @trans.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE on success&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="buffer" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstBuffer&lt;/doc&gt;
            &lt;type name="Gst.Buffer" c:type="GstBuffer*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_active"
              c:identifier="gst_rtsp_stream_transport_set_active"&gt;
        &lt;doc xml:space="preserve"&gt;Activate or deactivate datatransfer configured in @trans.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE when the state was changed.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="active" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;new state of @trans&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_callbacks"
              c:identifier="gst_rtsp_stream_transport_set_callbacks"&gt;
        &lt;doc xml:space="preserve"&gt;Install callbacks that will be called when data for a stream should be sent
to a client. This is usually used when sending RTP/RTCP over TCP.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="send_rtp"
                     transfer-ownership="none"
                     scope="notified"&gt;
            &lt;doc xml:space="preserve"&gt;a callback called when RTP should be sent&lt;/doc&gt;
            &lt;type name="RTSPSendFunc" c:type="GstRTSPSendFunc"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="send_rtcp"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3"&gt;
            &lt;doc xml:space="preserve"&gt;a callback called when RTCP should be sent&lt;/doc&gt;
            &lt;type name="RTSPSendFunc" c:type="GstRTSPSendFunc"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="user_data" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;user data passed to callbacks&lt;/doc&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="notify" transfer-ownership="none" scope="async"&gt;
            &lt;doc xml:space="preserve"&gt;called with the user_data when no longer needed.&lt;/doc&gt;
            &lt;type name="GLib.DestroyNotify" c:type="GDestroyNotify"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_keepalive"
              c:identifier="gst_rtsp_stream_transport_set_keepalive"&gt;
        &lt;doc xml:space="preserve"&gt;Install callbacks that will be called when RTCP packets are received from the
receiver of @trans.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="keep_alive"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2"&gt;
            &lt;doc xml:space="preserve"&gt;a callback called when the receiver is active&lt;/doc&gt;
            &lt;type name="RTSPKeepAliveFunc" c:type="GstRTSPKeepAliveFunc"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="user_data" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;user data passed to callback&lt;/doc&gt;
            &lt;type name="gpointer" c:type="gpointer"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="notify" transfer-ownership="none" scope="async"&gt;
            &lt;doc xml:space="preserve"&gt;called with the user_data when no longer needed.&lt;/doc&gt;
            &lt;type name="GLib.DestroyNotify" c:type="GDestroyNotify"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_timed_out"
              c:identifier="gst_rtsp_stream_transport_set_timed_out"&gt;
        &lt;doc xml:space="preserve"&gt;Set the timed out state of @trans to @timedout&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="timedout" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;timed out value&lt;/doc&gt;
            &lt;type name="gboolean" c:type="gboolean"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_transport"
              c:identifier="gst_rtsp_stream_transport_set_transport"&gt;
        &lt;doc xml:space="preserve"&gt;Set @tr as the client transport. This function takes ownership of the
passed @tr.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="tr" transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a client #GstRTSPTransport&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPTransport" c:type="GstRTSPTransport*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_url" c:identifier="gst_rtsp_stream_transport_set_url"&gt;
        &lt;doc xml:space="preserve"&gt;Set @url as the client url.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="trans" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport&lt;/doc&gt;
            &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="url" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a client #GstRTSPUrl&lt;/doc&gt;
            &lt;type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;field name="parent"&gt;
        &lt;doc xml:space="preserve"&gt;parent instance&lt;/doc&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPStreamTransportPrivate"
              c:type="GstRTSPStreamTransportPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/class&gt;
    &lt;record name="RTSPStreamTransportClass"
            c:type="GstRTSPStreamTransportClass"
            glib:is-gtype-struct-for="RTSPStreamTransport"&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;callback name="RTSPStreamTransportFilterFunc"
              c:type="GstRTSPStreamTransportFilterFunc"&gt;
      &lt;doc xml:space="preserve"&gt;This function will be called by the gst_rtsp_stream_transport_filter(). An
implementation should return a value of #GstRTSPFilterResult.

When this function returns #GST_RTSP_FILTER_REMOVE, @trans will be removed
from @stream.

A return value of #GST_RTSP_FILTER_KEEP will leave @trans untouched in
@stream.

A value of #GST_RTSP_FILTER_REF will add @trans to the result #GList of
gst_rtsp_stream_transport_filter().&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;doc xml:space="preserve"&gt;a #GstRTSPFilterResult.&lt;/doc&gt;
        &lt;type name="RTSPFilterResult" c:type="GstRTSPFilterResult"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="stream" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPStream object&lt;/doc&gt;
          &lt;type name="RTSPStream" c:type="GstRTSPStream*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="trans" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPStreamTransport in @stream&lt;/doc&gt;
          &lt;type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="user_data" transfer-ownership="none" closure="2"&gt;
          &lt;doc xml:space="preserve"&gt;user data that has been given to gst_rtsp_stream_transport_filter()&lt;/doc&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/callback&gt;
    &lt;record name="RTSPStreamTransportPrivate"
            c:type="GstRTSPStreamTransportPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;enumeration name="RTSPSuspendMode"
                 glib:type-name="GstRTSPSuspendMode"
                 glib:get-type="gst_rtsp_suspend_mode_get_type"
                 c:type="GstRTSPSuspendMode"&gt;
      &lt;doc xml:space="preserve"&gt;The suspend mode of the media pipeline. A media pipeline is suspended right
after creating the SDP and when the client preforms a PAUSED request.&lt;/doc&gt;
      &lt;member name="none"
              value="0"
              c:identifier="GST_RTSP_SUSPEND_MODE_NONE"
              glib:nick="none"&gt;
        &lt;doc xml:space="preserve"&gt;Media is not suspended&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="pause"
              value="1"
              c:identifier="GST_RTSP_SUSPEND_MODE_PAUSE"
              glib:nick="pause"&gt;
        &lt;doc xml:space="preserve"&gt;Media is PAUSED in suspend&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="reset"
              value="2"
              c:identifier="GST_RTSP_SUSPEND_MODE_RESET"
              glib:nick="reset"&gt;
        &lt;doc xml:space="preserve"&gt;The media is set to NULL when suspended&lt;/doc&gt;
      &lt;/member&gt;
    &lt;/enumeration&gt;
    &lt;record name="RTSPThread"
            c:type="GstRTSPThread"
            glib:type-name="GstRTSPThread"
            glib:get-type="gst_rtsp_thread_get_type"
            c:symbol-prefix="rtsp_thread"&gt;
      &lt;doc xml:space="preserve"&gt;Structure holding info about a mainloop running in a thread&lt;/doc&gt;
      &lt;field name="mini_object" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;parent #GstMiniObject&lt;/doc&gt;
        &lt;type name="Gst.MiniObject" c:type="GstMiniObject"/&gt;
      &lt;/field&gt;
      &lt;field name="type" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;the thread type&lt;/doc&gt;
        &lt;type name="RTSPThreadType" c:type="GstRTSPThreadType"/&gt;
      &lt;/field&gt;
      &lt;field name="context" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;a #GMainContext&lt;/doc&gt;
        &lt;type name="GLib.MainContext" c:type="GMainContext*"/&gt;
      &lt;/field&gt;
      &lt;field name="loop" writable="1"&gt;
        &lt;doc xml:space="preserve"&gt;a #GMainLoop&lt;/doc&gt;
        &lt;type name="GLib.MainLoop" c:type="GMainLoop*"/&gt;
      &lt;/field&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_thread_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new thread object that can run a mainloop.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPThread.&lt;/doc&gt;
          &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="type" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the thread type&lt;/doc&gt;
            &lt;type name="RTSPThreadType" c:type="GstRTSPThreadType"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/constructor&gt;
      &lt;method name="reuse" c:identifier="gst_rtsp_thread_reuse"&gt;
        &lt;doc xml:space="preserve"&gt;Reuse the mainloop of @thread&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if the mainloop could be reused&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="thread" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPThread&lt;/doc&gt;
            &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="stop" c:identifier="gst_rtsp_thread_stop"&gt;
        &lt;doc xml:space="preserve"&gt;Stop and unref @thread. When no threads are using the mainloop, the thread
will be stopped and the final ref to @thread will be released.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="thread" transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPThread&lt;/doc&gt;
            &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
    &lt;/record&gt;
    &lt;class name="RTSPThreadPool"
           c:symbol-prefix="rtsp_thread_pool"
           c:type="GstRTSPThreadPool"
           parent="GObject.Object"
           glib:type-name="GstRTSPThreadPool"
           glib:get-type="gst_rtsp_thread_pool_get_type"
           glib:type-struct="RTSPThreadPoolClass"&gt;
      &lt;doc xml:space="preserve"&gt;The thread pool structure.&lt;/doc&gt;
      &lt;constructor name="new" c:identifier="gst_rtsp_thread_pool_new"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new #GstRTSPThreadPool instance.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPThreadPool&lt;/doc&gt;
          &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
        &lt;/return-value&gt;
      &lt;/constructor&gt;
      &lt;function name="cleanup" c:identifier="gst_rtsp_thread_pool_cleanup"&gt;
        &lt;doc xml:space="preserve"&gt;Wait for all tasks to be stopped and free all allocated resources. This is
mainly used in test suites to ensure proper cleanup of internal data
structures.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
      &lt;/function&gt;
      &lt;virtual-method name="configure_thread"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="thread" transfer-ownership="none"&gt;
            &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="get_thread" invoker="get_thread"&gt;
        &lt;doc xml:space="preserve"&gt;Get a new #GstRTSPThread for @type and @ctx.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPThread, gst_rtsp_thread_stop() after usage&lt;/doc&gt;
          &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPThreadPool&lt;/doc&gt;
            &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="type" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the #GstRTSPThreadType&lt;/doc&gt;
            &lt;type name="RTSPThreadType" c:type="GstRTSPThreadType"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPContext&lt;/doc&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="thread_enter"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="thread" transfer-ownership="none"&gt;
            &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;virtual-method name="thread_leave"&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="thread" transfer-ownership="none"&gt;
            &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/virtual-method&gt;
      &lt;method name="get_max_threads"
              c:identifier="gst_rtsp_thread_pool_get_max_threads"&gt;
        &lt;doc xml:space="preserve"&gt;Get the maximum number of threads used for client connections.
See gst_rtsp_thread_pool_set_max_threads().&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the maximum number of threads.&lt;/doc&gt;
          &lt;type name="gint" c:type="gint"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPThreadPool&lt;/doc&gt;
            &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_thread" c:identifier="gst_rtsp_thread_pool_get_thread"&gt;
        &lt;doc xml:space="preserve"&gt;Get a new #GstRTSPThread for @type and @ctx.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new #GstRTSPThread, gst_rtsp_thread_stop() after usage&lt;/doc&gt;
          &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPThreadPool&lt;/doc&gt;
            &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="type" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the #GstRTSPThreadType&lt;/doc&gt;
            &lt;type name="RTSPThreadType" c:type="GstRTSPThreadType"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="ctx" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPContext&lt;/doc&gt;
            &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="set_max_threads"
              c:identifier="gst_rtsp_thread_pool_set_max_threads"&gt;
        &lt;doc xml:space="preserve"&gt;Set the maximum threads used by the pool to handle client requests.
A value of 0 will use the pool mainloop, a value of -1 will use an
unlimited number of threads.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;type name="none" c:type="void"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="pool" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPThreadPool&lt;/doc&gt;
            &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="max_threads" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;maximum threads&lt;/doc&gt;
            &lt;type name="gint" c:type="gint"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;property name="max-threads" writable="1" transfer-ownership="none"&gt;
        &lt;type name="gint" c:type="gint"/&gt;
      &lt;/property&gt;
      &lt;field name="parent"&gt;
        &lt;type name="GObject.Object" c:type="GObject"/&gt;
      &lt;/field&gt;
      &lt;field name="priv" readable="0" private="1"&gt;
        &lt;type name="RTSPThreadPoolPrivate" c:type="GstRTSPThreadPoolPrivate*"/&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/class&gt;
    &lt;record name="RTSPThreadPoolClass"
            c:type="GstRTSPThreadPoolClass"
            glib:is-gtype-struct-for="RTSPThreadPool"&gt;
      &lt;doc xml:space="preserve"&gt;Class for managing threads.&lt;/doc&gt;
      &lt;field name="parent_class"&gt;
        &lt;type name="GObject.ObjectClass" c:type="GObjectClass"/&gt;
      &lt;/field&gt;
      &lt;field name="pool"&gt;
        &lt;doc xml:space="preserve"&gt;a #GThreadPool used internally&lt;/doc&gt;
        &lt;type name="GLib.ThreadPool" c:type="GThreadPool*"/&gt;
      &lt;/field&gt;
      &lt;field name="get_thread"&gt;
        &lt;callback name="get_thread"&gt;
          &lt;return-value transfer-ownership="full"&gt;
            &lt;doc xml:space="preserve"&gt;a new #GstRTSPThread, gst_rtsp_thread_stop() after usage&lt;/doc&gt;
            &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="pool" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;a #GstRTSPThreadPool&lt;/doc&gt;
              &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="type" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;the #GstRTSPThreadType&lt;/doc&gt;
              &lt;type name="RTSPThreadType" c:type="GstRTSPThreadType"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;doc xml:space="preserve"&gt;a #GstRTSPContext&lt;/doc&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="configure_thread"&gt;
        &lt;callback name="configure_thread"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="pool" transfer-ownership="none"&gt;
              &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="thread" transfer-ownership="none"&gt;
              &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="ctx" transfer-ownership="none"&gt;
              &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="thread_enter"&gt;
        &lt;callback name="thread_enter"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="pool" transfer-ownership="none"&gt;
              &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="thread" transfer-ownership="none"&gt;
              &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="thread_leave"&gt;
        &lt;callback name="thread_leave"&gt;
          &lt;return-value transfer-ownership="none"&gt;
            &lt;type name="none" c:type="void"/&gt;
          &lt;/return-value&gt;
          &lt;parameters&gt;
            &lt;parameter name="pool" transfer-ownership="none"&gt;
              &lt;type name="RTSPThreadPool" c:type="GstRTSPThreadPool*"/&gt;
            &lt;/parameter&gt;
            &lt;parameter name="thread" transfer-ownership="none"&gt;
              &lt;type name="RTSPThread" c:type="GstRTSPThread*"/&gt;
            &lt;/parameter&gt;
          &lt;/parameters&gt;
        &lt;/callback&gt;
      &lt;/field&gt;
      &lt;field name="_gst_reserved" readable="0" private="1"&gt;
        &lt;array zero-terminated="0" c:type="gpointer" fixed-size="4"&gt;
          &lt;type name="gpointer" c:type="gpointer"/&gt;
        &lt;/array&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;record name="RTSPThreadPoolPrivate"
            c:type="GstRTSPThreadPoolPrivate"
            disguised="1"&gt;
    &lt;/record&gt;
    &lt;enumeration name="RTSPThreadType" c:type="GstRTSPThreadType"&gt;
      &lt;doc xml:space="preserve"&gt;Different thread types&lt;/doc&gt;
      &lt;member name="client"
              value="0"
              c:identifier="GST_RTSP_THREAD_TYPE_CLIENT"&gt;
        &lt;doc xml:space="preserve"&gt;a thread to handle the client communication&lt;/doc&gt;
      &lt;/member&gt;
      &lt;member name="media" value="1" c:identifier="GST_RTSP_THREAD_TYPE_MEDIA"&gt;
        &lt;doc xml:space="preserve"&gt;a thread to handle media&lt;/doc&gt;
      &lt;/member&gt;
    &lt;/enumeration&gt;
    &lt;record name="RTSPToken"
            c:type="GstRTSPToken"
            glib:type-name="GstRTSPToken"
            glib:get-type="gst_rtsp_token_get_type"
            c:symbol-prefix="rtsp_token"&gt;
      &lt;doc xml:space="preserve"&gt;An opaque object used for checking authorisations.
It is generated after successful authentication.&lt;/doc&gt;
      &lt;field name="mini_object" writable="1"&gt;
        &lt;type name="Gst.MiniObject" c:type="GstMiniObject"/&gt;
      &lt;/field&gt;
      &lt;constructor name="new"
                   c:identifier="gst_rtsp_token_new"
                   introspectable="0"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new Authorization token with the given fieldnames and values.
Arguments are given similar to gst_structure_new().&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new authorization token.&lt;/doc&gt;
          &lt;type name="RTSPToken" c:type="GstRTSPToken*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="firstfield" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the first fieldname&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="..." transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;additional arguments&lt;/doc&gt;
            &lt;varargs/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/constructor&gt;
      &lt;constructor name="new_empty" c:identifier="gst_rtsp_token_new_empty"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new empty Authorization token.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new empty authorization token.&lt;/doc&gt;
          &lt;type name="RTSPToken" c:type="GstRTSPToken*"/&gt;
        &lt;/return-value&gt;
      &lt;/constructor&gt;
      &lt;constructor name="new_valist"
                   c:identifier="gst_rtsp_token_new_valist"
                   introspectable="0"&gt;
        &lt;doc xml:space="preserve"&gt;Create a new Authorization token with the given fieldnames and values.
Arguments are given similar to gst_structure_new_valist().&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;a new authorization token.&lt;/doc&gt;
          &lt;type name="RTSPToken" c:type="GstRTSPToken*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;parameter name="firstfield" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;the first fieldname&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
          &lt;parameter name="var_args" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;additional arguments&lt;/doc&gt;
            &lt;type name="va_list" c:type="va_list"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/constructor&gt;
      &lt;method name="get_string" c:identifier="gst_rtsp_token_get_string"&gt;
        &lt;doc xml:space="preserve"&gt;Get the string value of @field in @token.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;the string value of @field in @token or %NULL when @field is not
defined in @token.&lt;/doc&gt;
          &lt;type name="utf8" c:type="const gchar*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="token" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPToken&lt;/doc&gt;
            &lt;type name="RTSPToken" c:type="GstRTSPToken*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="field" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a field name&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="get_structure" c:identifier="gst_rtsp_token_get_structure"&gt;
        &lt;doc xml:space="preserve"&gt;Access the structure of the token.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;The structure of the token. The structure is still
owned by the token, which means that you should not free it and
that the pointer becomes invalid when you free the token.

MT safe.&lt;/doc&gt;
          &lt;type name="Gst.Structure" c:type="const GstStructure*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="token" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;The #GstRTSPToken.&lt;/doc&gt;
            &lt;type name="RTSPToken" c:type="GstRTSPToken*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="is_allowed" c:identifier="gst_rtsp_token_is_allowed"&gt;
        &lt;doc xml:space="preserve"&gt;Check if @token has a boolean @field and if it is set to %TRUE.&lt;/doc&gt;
        &lt;return-value transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;%TRUE if @token has a boolean field named @field set to %TRUE.&lt;/doc&gt;
          &lt;type name="gboolean" c:type="gboolean"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="token" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a #GstRTSPToken&lt;/doc&gt;
            &lt;type name="RTSPToken" c:type="GstRTSPToken*"/&gt;
          &lt;/instance-parameter&gt;
          &lt;parameter name="field" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;a field name&lt;/doc&gt;
            &lt;type name="utf8" c:type="const gchar*"/&gt;
          &lt;/parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
      &lt;method name="writable_structure"
              c:identifier="gst_rtsp_token_writable_structure"&gt;
        &lt;doc xml:space="preserve"&gt;Get a writable version of the structure.&lt;/doc&gt;
        &lt;return-value transfer-ownership="full"&gt;
          &lt;doc xml:space="preserve"&gt;The structure of the token. The structure is still
owned by the token, which means that you should not free it and
that the pointer becomes invalid when you free the token.
This function checks if @token is writable and will never return %NULL.

MT safe.&lt;/doc&gt;
          &lt;type name="Gst.Structure" c:type="GstStructure*"/&gt;
        &lt;/return-value&gt;
        &lt;parameters&gt;
          &lt;instance-parameter name="token" transfer-ownership="none"&gt;
            &lt;doc xml:space="preserve"&gt;The #GstRTSPToken.&lt;/doc&gt;
            &lt;type name="RTSPToken" c:type="GstRTSPToken*"/&gt;
          &lt;/instance-parameter&gt;
        &lt;/parameters&gt;
      &lt;/method&gt;
    &lt;/record&gt;
    &lt;constant name="RTSP_ADDRESS_POOL_ANY_IPV4"
              value="0.0.0.0"
              c:type="GST_RTSP_ADDRESS_POOL_ANY_IPV4"&gt;
      &lt;doc xml:space="preserve"&gt;Used with gst_rtsp_address_pool_add_range() to bind to all
IPv4 addresses&lt;/doc&gt;
      &lt;type name="utf8" c:type="gchar*"/&gt;
    &lt;/constant&gt;
    &lt;constant name="RTSP_ADDRESS_POOL_ANY_IPV6"
              value="::"
              c:type="GST_RTSP_ADDRESS_POOL_ANY_IPV6"&gt;
      &lt;doc xml:space="preserve"&gt;Used with gst_rtsp_address_pool_add_range() to bind to all
IPv6 addresses&lt;/doc&gt;
      &lt;type name="utf8" c:type="gchar*"/&gt;
    &lt;/constant&gt;
    &lt;constant name="RTSP_AUTH_CHECK_CONNECT"
              value="auth.check.connect"
              c:type="GST_RTSP_AUTH_CHECK_CONNECT"&gt;
      &lt;doc xml:space="preserve"&gt;Check a new connection&lt;/doc&gt;
      &lt;type name="utf8" c:type="gchar*"/&gt;
    &lt;/constant&gt;
    &lt;constant name="RTSP_AUTH_CHECK_MEDIA_FACTORY_ACCESS"
              value="auth.check.media.factory.access"
              c:type="GST_RTSP_AUTH_CHECK_MEDIA_FACTORY_ACCESS"&gt;
      &lt;doc xml:space="preserve"&gt;Check if access is allowed to a factory.
When access is not allowed an 404 Not Found is sent in the response.&lt;/doc&gt;
      &lt;type name="utf8" c:type="gchar*"/&gt;
    &lt;/constant&gt;
    &lt;constant name="RTSP_AUTH_CHECK_MEDIA_FACTORY_CONSTRUCT"
              value="auth.check.media.factory.construct"
              c:type="GST_RTSP_AUTH_CHECK_MEDIA_FACTORY_CONSTRUCT"&gt;
      &lt;doc xml:space="preserve"&gt;Check if media can be constructed from a media factory
A response should be sent on error.&lt;/doc&gt;
      &lt;type name="utf8" c:type="gchar*"/&gt;
    &lt;/constant&gt;
    &lt;constant name="RTSP_AUTH_CHECK_TRANSPORT_CLIENT_SETTINGS"
              value="auth.check.transport.client-settings"
              c:type="GST_RTSP_AUTH_CHECK_TRANSPORT_CLIENT_SETTINGS"&gt;
      &lt;doc xml:space="preserve"&gt;Check if the client can specify TTL, destination and
port pair in multicast. No response is sent when the check returns
%FALSE.&lt;/doc&gt;
      &lt;type name="utf8" c:type="gchar*"/&gt;
    &lt;/constant&gt;
    &lt;constant name="RTSP_AUTH_CHECK_URL"
              value="auth.check.url"
              c:type="GST_RTSP_AUTH_CHECK_URL"&gt;
      &lt;doc xml:space="preserve"&gt;Check the URL and methods&lt;/doc&gt;
      &lt;type name="utf8" c:type="gchar*"/&gt;
    &lt;/constant&gt;
    &lt;constant name="RTSP_PERM_MEDIA_FACTORY_ACCESS"
              value="media.factory.access"
              c:type="GST_RTSP_PERM_MEDIA_FACTORY_ACCESS"&gt;
      &lt;doc xml:space="preserve"&gt;G_TYPE_BOOLEAN, %TRUE if the media can be accessed, %FALSE will
return a 404 Not Found error when trying to access the media.&lt;/doc&gt;
      &lt;type name="utf8" c:type="gchar*"/&gt;
    &lt;/constant&gt;
    &lt;constant name="RTSP_PERM_MEDIA_FACTORY_CONSTRUCT"
              value="media.factory.construct"
              c:type="GST_RTSP_PERM_MEDIA_FACTORY_CONSTRUCT"&gt;
      &lt;doc xml:space="preserve"&gt;G_TYPE_BOOLEAN, %TRUE if the media can be constructed, %FALSE will
return a 404 Not Found error when trying to access the media.&lt;/doc&gt;
      &lt;type name="utf8" c:type="gchar*"/&gt;
    &lt;/constant&gt;
    &lt;constant name="RTSP_TOKEN_MEDIA_FACTORY_ROLE"
              value="media.factory.role"
              c:type="GST_RTSP_TOKEN_MEDIA_FACTORY_ROLE"&gt;
      &lt;doc xml:space="preserve"&gt;G_TYPE_STRING, the role to use when dealing with media factories

The default #GstRTSPAuth object uses this string in the token to find the
role of the media factory. It will then retrieve the #GstRTSPPermissions of
the media factory and retrieve the role with the same name.&lt;/doc&gt;
      &lt;type name="utf8" c:type="gchar*"/&gt;
    &lt;/constant&gt;
    &lt;constant name="RTSP_TOKEN_TRANSPORT_CLIENT_SETTINGS"
              value="transport.client-settings"
              c:type="GST_RTSP_TOKEN_TRANSPORT_CLIENT_SETTINGS"&gt;
      &lt;doc xml:space="preserve"&gt;G_TYPE_BOOLEAN, %TRUE if the client can specify TTL, destination and
    port pair in multicast.&lt;/doc&gt;
      &lt;type name="utf8" c:type="gchar*"/&gt;
    &lt;/constant&gt;
    &lt;record name="SDPInfo" c:type="GstSDPInfo"&gt;
      &lt;field name="is_ipv6" writable="1"&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/field&gt;
      &lt;field name="server_ip" writable="1"&gt;
        &lt;type name="utf8" c:type="const gchar*"/&gt;
      &lt;/field&gt;
    &lt;/record&gt;
    &lt;function name="rtsp_context_get_type"
              c:identifier="gst_rtsp_context_get_type"&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;type name="GType" c:type="GType"/&gt;
      &lt;/return-value&gt;
    &lt;/function&gt;
    &lt;function name="rtsp_params_get" c:identifier="gst_rtsp_params_get"&gt;
      &lt;doc xml:space="preserve"&gt;Get parameters (not implemented yet)&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;doc xml:space="preserve"&gt;a #GstRTSPResult&lt;/doc&gt;
        &lt;type name="GstRtsp.RTSPResult" c:type="GstRTSPResult"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="client" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
          &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="ctx" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPContext&lt;/doc&gt;
          &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/function&gt;
    &lt;function name="rtsp_params_set" c:identifier="gst_rtsp_params_set"&gt;
      &lt;doc xml:space="preserve"&gt;Set parameters (not implemented yet)&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;doc xml:space="preserve"&gt;a #GstRTSPResult&lt;/doc&gt;
        &lt;type name="GstRtsp.RTSPResult" c:type="GstRTSPResult"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="client" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPClient&lt;/doc&gt;
          &lt;type name="RTSPClient" c:type="GstRTSPClient*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="ctx" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPContext&lt;/doc&gt;
          &lt;type name="RTSPContext" c:type="GstRTSPContext*"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/function&gt;
    &lt;function name="rtsp_sdp_from_media"
              c:identifier="gst_rtsp_sdp_from_media"&gt;
      &lt;doc xml:space="preserve"&gt;Add @media specific info to @sdp. @info is used to configure the connection
information in the SDP.&lt;/doc&gt;
      &lt;return-value transfer-ownership="none"&gt;
        &lt;doc xml:space="preserve"&gt;TRUE on success.&lt;/doc&gt;
        &lt;type name="gboolean" c:type="gboolean"/&gt;
      &lt;/return-value&gt;
      &lt;parameters&gt;
        &lt;parameter name="sdp" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstSDPMessage&lt;/doc&gt;
          &lt;type name="GstSdp.SDPMessage" c:type="GstSDPMessage*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="info" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;info&lt;/doc&gt;
          &lt;type name="SDPInfo" c:type="GstSDPInfo*"/&gt;
        &lt;/parameter&gt;
        &lt;parameter name="media" transfer-ownership="none"&gt;
          &lt;doc xml:space="preserve"&gt;a #GstRTSPMedia&lt;/doc&gt;
          &lt;type name="RTSPMedia" c:type="GstRTSPMedia*"/&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/function&gt;
  &lt;/namespace&gt;
&lt;/repository&gt;
</pre></body></html>